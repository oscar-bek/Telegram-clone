From 497eb0506a7ba63073316c25321aa21275b99a54 Mon Sep 17 00:00:00 2001
From: oscar-bek <salamov.behzod@gmail.com>
Date: Thu, 31 Jul 2025 17:24:53 +0900
Subject: [PATCH 1/8] feat(server): Express application init

---
 .gitignore                     |   40 +
 app.js                         |   37 +
 controllers/auth.controller.js |   13 +
 package-lock.json              | 1582 ++++++++++++++++++++++++++++++++
 package.json                   |   26 +
 routes/index.js                |   14 +
 6 files changed, 1712 insertions(+)
 create mode 100644 .gitignore
 create mode 100644 app.js
 create mode 100644 controllers/auth.controller.js
 create mode 100644 package-lock.json
 create mode 100644 package.json
 create mode 100644 routes/index.js

diff --git a/.gitignore b/.gitignore
new file mode 100644
index 0000000..d1c81e1
--- /dev/null
+++ b/.gitignore
@@ -0,0 +1,40 @@
+# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.
+
+# dependencies
+/node_modules
+/.pnp
+.pnp.*
+.yarn/*
+!.yarn/patches
+!.yarn/plugins
+!.yarn/releases
+!.yarn/versions
+
+# testing
+/coverage
+
+# next.js
+/.next/
+/out/
+
+# production
+/build
+
+# misc
+.DS_Store
+*.pem
+
+# debug
+npm-debug.log*
+yarn-debug.log*
+yarn-error.log*
+
+# env files (can opt-in for committing if needed)
+.env*
+
+# vercel
+.vercel
+
+# typescript
+*.tsbuildinfo
+next-env.d.ts
\ No newline at end of file
diff --git a/app.js b/app.js
new file mode 100644
index 0000000..96bc30e
--- /dev/null
+++ b/app.js
@@ -0,0 +1,37 @@
+require("dotenv").config();
+
+const express = require("express");
+const cookieParser = require("cookie-parser");
+const cors = require("cors");
+
+const app = express();
+
+// Middleware
+app.use(express.json());
+app.use(cookieParser());
+app.use(
+  cors({
+    origin: "http://localhost:3000", // Frontend URL
+    credentials: true,
+  })
+);
+
+// Root route
+app.get("/", (req, res) => {
+  res.json({
+    message: "Telegram Clone Server is running!",
+    status: "OK",
+    endpoints: {
+      auth: "/api/auth/login, /api/auth/verify",
+      user: "/api/user/contacts",
+    },
+  });
+});
+
+app.use("/api", require("./routes/index"));
+
+const PORT = process.env.PORT || 6000;
+
+app.listen(PORT, () =>
+  console.log(`Server is running on port http://localhost:${PORT}`)
+);
diff --git a/controllers/auth.controller.js b/controllers/auth.controller.js
new file mode 100644
index 0000000..2794f14
--- /dev/null
+++ b/controllers/auth.controller.js
@@ -0,0 +1,13 @@
+class AuthController {
+	async login(req, res, next) {
+		const { email } = req.body
+		res.json({ email })
+	}
+	async verify(req, res, next) {
+    console.log("Verify called with body:", req.body);
+		const { email, otp } = req.body
+		res.json({ email, otp })
+	}
+}
+
+module.exports = new AuthController()
\ No newline at end of file
diff --git a/package-lock.json b/package-lock.json
new file mode 100644
index 0000000..debe03b
--- /dev/null
+++ b/package-lock.json
@@ -0,0 +1,1582 @@
+{
+  "name": "server",
+  "version": "1.0.0",
+  "lockfileVersion": 3,
+  "requires": true,
+  "packages": {
+    "": {
+      "name": "server",
+      "version": "1.0.0",
+      "license": "ISC",
+      "dependencies": {
+        "cookie-parser": "^1.4.7",
+        "cors": "^2.8.5",
+        "dotenv": "^17.2.1",
+        "express": "^5.1.0",
+        "express-group-routes": "^1.1.0",
+        "http": "^0.0.1-security",
+        "nodemon": "^3.1.10"
+      }
+    },
+    "node_modules/accepts": {
+      "version": "2.0.0",
+      "resolved": "https://registry.npmjs.org/accepts/-/accepts-2.0.0.tgz",
+      "integrity": "sha512-5cvg6CtKwfgdmVqY1WIiXKc3Q1bkRqGLi+2W/6ao+6Y7gu/RCwRuAhGEzh5B4KlszSuTLgZYuqFqo5bImjNKng==",
+      "license": "MIT",
+      "dependencies": {
+        "mime-types": "^3.0.0",
+        "negotiator": "^1.0.0"
+      },
+      "engines": {
+        "node": ">= 0.6"
+      }
+    },
+    "node_modules/anymatch": {
+      "version": "3.1.3",
+      "resolved": "https://registry.npmjs.org/anymatch/-/anymatch-3.1.3.tgz",
+      "integrity": "sha512-KMReFUr0B4t+D+OBkjR3KYqvocp2XaSzO55UcB6mgQMd3KbcE+mWTyvVV7D/zsdEbNnV6acZUutkiHQXvTr1Rw==",
+      "license": "ISC",
+      "dependencies": {
+        "normalize-path": "^3.0.0",
+        "picomatch": "^2.0.4"
+      },
+      "engines": {
+        "node": ">= 8"
+      }
+    },
+    "node_modules/array-flatten": {
+      "version": "1.1.1",
+      "resolved": "https://registry.npmjs.org/array-flatten/-/array-flatten-1.1.1.tgz",
+      "integrity": "sha512-PCVAQswWemu6UdxsDFFX/+gVeYqKAod3D3UVm91jHwynguOwAvYPhx8nNlM++NqRcK6CxxpUafjmhIdKiHibqg==",
+      "license": "MIT"
+    },
+    "node_modules/balanced-match": {
+      "version": "1.0.2",
+      "resolved": "https://registry.npmjs.org/balanced-match/-/balanced-match-1.0.2.tgz",
+      "integrity": "sha512-3oSeUO0TMV67hN1AmbXsK4yaqU7tjiHlbxRDZOpH0KW9+CeX4bRAaX0Anxt0tx2MrpRpWwQaPwIlISEJhYU5Pw==",
+      "license": "MIT"
+    },
+    "node_modules/binary-extensions": {
+      "version": "2.3.0",
+      "resolved": "https://registry.npmjs.org/binary-extensions/-/binary-extensions-2.3.0.tgz",
+      "integrity": "sha512-Ceh+7ox5qe7LJuLHoY0feh3pHuUDHAcRUeyL2VYghZwfpkNIy/+8Ocg0a3UuSoYzavmylwuLWQOf3hl0jjMMIw==",
+      "license": "MIT",
+      "engines": {
+        "node": ">=8"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
+      }
+    },
+    "node_modules/body-parser": {
+      "version": "2.2.0",
+      "resolved": "https://registry.npmjs.org/body-parser/-/body-parser-2.2.0.tgz",
+      "integrity": "sha512-02qvAaxv8tp7fBa/mw1ga98OGm+eCbqzJOKoRt70sLmfEEi+jyBYVTDGfCL/k06/4EMk/z01gCe7HoCH/f2LTg==",
+      "license": "MIT",
+      "dependencies": {
+        "bytes": "^3.1.2",
+        "content-type": "^1.0.5",
+        "debug": "^4.4.0",
+        "http-errors": "^2.0.0",
+        "iconv-lite": "^0.6.3",
+        "on-finished": "^2.4.1",
+        "qs": "^6.14.0",
+        "raw-body": "^3.0.0",
+        "type-is": "^2.0.0"
+      },
+      "engines": {
+        "node": ">=18"
+      }
+    },
+    "node_modules/brace-expansion": {
+      "version": "1.1.12",
+      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.12.tgz",
+      "integrity": "sha512-9T9UjW3r0UW5c1Q7GTwllptXwhvYmEzFhzMfZ9H7FQWt+uZePjZPjBP/W1ZEyZ1twGWom5/56TF4lPcqjnDHcg==",
+      "license": "MIT",
+      "dependencies": {
+        "balanced-match": "^1.0.0",
+        "concat-map": "0.0.1"
+      }
+    },
+    "node_modules/braces": {
+      "version": "3.0.3",
+      "resolved": "https://registry.npmjs.org/braces/-/braces-3.0.3.tgz",
+      "integrity": "sha512-yQbXgO/OSZVD2IsiLlro+7Hf6Q18EJrKSEsdoMzKePKXct3gvD8oLcOQdIzGupr5Fj+EDe8gO/lxc1BzfMpxvA==",
+      "license": "MIT",
+      "dependencies": {
+        "fill-range": "^7.1.1"
+      },
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/bytes": {
+      "version": "3.1.2",
+      "resolved": "https://registry.npmjs.org/bytes/-/bytes-3.1.2.tgz",
+      "integrity": "sha512-/Nf7TyzTx6S3yRJObOAV7956r8cr2+Oj8AC5dt8wSP3BQAoeX58NoHyCU8P8zGkNXStjTSi6fzO6F0pBdcYbEg==",
+      "license": "MIT",
+      "engines": {
+        "node": ">= 0.8"
+      }
+    },
+    "node_modules/call-bind-apply-helpers": {
+      "version": "1.0.2",
+      "resolved": "https://registry.npmjs.org/call-bind-apply-helpers/-/call-bind-apply-helpers-1.0.2.tgz",
+      "integrity": "sha512-Sp1ablJ0ivDkSzjcaJdxEunN5/XvksFJ2sMBFfq6x0ryhQV/2b/KwFe21cMpmHtPOSij8K99/wSfoEuTObmuMQ==",
+      "license": "MIT",
+      "dependencies": {
+        "es-errors": "^1.3.0",
+        "function-bind": "^1.1.2"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      }
+    },
+    "node_modules/call-bound": {
+      "version": "1.0.4",
+      "resolved": "https://registry.npmjs.org/call-bound/-/call-bound-1.0.4.tgz",
+      "integrity": "sha512-+ys997U96po4Kx/ABpBCqhA9EuxJaQWDQg7295H4hBphv3IZg0boBKuwYpt4YXp6MZ5AmZQnU/tyMTlRpaSejg==",
+      "license": "MIT",
+      "dependencies": {
+        "call-bind-apply-helpers": "^1.0.2",
+        "get-intrinsic": "^1.3.0"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/chokidar": {
+      "version": "3.6.0",
+      "resolved": "https://registry.npmjs.org/chokidar/-/chokidar-3.6.0.tgz",
+      "integrity": "sha512-7VT13fmjotKpGipCW9JEQAusEPE+Ei8nl6/g4FBAmIm0GOOLMua9NDDo/DWp0ZAxCr3cPq5ZpBqmPAQgDda2Pw==",
+      "license": "MIT",
+      "dependencies": {
+        "anymatch": "~3.1.2",
+        "braces": "~3.0.2",
+        "glob-parent": "~5.1.2",
+        "is-binary-path": "~2.1.0",
+        "is-glob": "~4.0.1",
+        "normalize-path": "~3.0.0",
+        "readdirp": "~3.6.0"
+      },
+      "engines": {
+        "node": ">= 8.10.0"
+      },
+      "funding": {
+        "url": "https://paulmillr.com/funding/"
+      },
+      "optionalDependencies": {
+        "fsevents": "~2.3.2"
+      }
+    },
+    "node_modules/concat-map": {
+      "version": "0.0.1",
+      "resolved": "https://registry.npmjs.org/concat-map/-/concat-map-0.0.1.tgz",
+      "integrity": "sha512-/Srv4dswyQNBfohGpz9o6Yb3Gz3SrUDqBH5rTuhGR7ahtlbYKnVxw2bCFMRljaA7EXHaXZ8wsHdodFvbkhKmqg==",
+      "license": "MIT"
+    },
+    "node_modules/content-disposition": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/content-disposition/-/content-disposition-1.0.0.tgz",
+      "integrity": "sha512-Au9nRL8VNUut/XSzbQA38+M78dzP4D+eqg3gfJHMIHHYa3bg067xj1KxMUWj+VULbiZMowKngFFbKczUrNJ1mg==",
+      "license": "MIT",
+      "dependencies": {
+        "safe-buffer": "5.2.1"
+      },
+      "engines": {
+        "node": ">= 0.6"
+      }
+    },
+    "node_modules/content-type": {
+      "version": "1.0.5",
+      "resolved": "https://registry.npmjs.org/content-type/-/content-type-1.0.5.tgz",
+      "integrity": "sha512-nTjqfcBFEipKdXCv4YDQWCfmcLZKm81ldF0pAopTvyrFGVbcR6P/VAAd5G7N+0tTr8QqiU0tFadD6FK4NtJwOA==",
+      "license": "MIT",
+      "engines": {
+        "node": ">= 0.6"
+      }
+    },
+    "node_modules/cookie": {
+      "version": "0.7.2",
+      "resolved": "https://registry.npmjs.org/cookie/-/cookie-0.7.2.tgz",
+      "integrity": "sha512-yki5XnKuf750l50uGTllt6kKILY4nQ1eNIQatoXEByZ5dWgnKqbnqmTrBE5B4N7lrMJKQ2ytWMiTO2o0v6Ew/w==",
+      "license": "MIT",
+      "engines": {
+        "node": ">= 0.6"
+      }
+    },
+    "node_modules/cookie-parser": {
+      "version": "1.4.7",
+      "resolved": "https://registry.npmjs.org/cookie-parser/-/cookie-parser-1.4.7.tgz",
+      "integrity": "sha512-nGUvgXnotP3BsjiLX2ypbQnWoGUPIIfHQNZkkC668ntrzGWEZVW70HDEB1qnNGMicPje6EttlIgzo51YSwNQGw==",
+      "license": "MIT",
+      "dependencies": {
+        "cookie": "0.7.2",
+        "cookie-signature": "1.0.6"
+      },
+      "engines": {
+        "node": ">= 0.8.0"
+      }
+    },
+    "node_modules/cookie-parser/node_modules/cookie-signature": {
+      "version": "1.0.6",
+      "resolved": "https://registry.npmjs.org/cookie-signature/-/cookie-signature-1.0.6.tgz",
+      "integrity": "sha512-QADzlaHc8icV8I7vbaJXJwod9HWYp8uCqf1xa4OfNu1T7JVxQIrUgOWtHdNDtPiywmFbiS12VjotIXLrKM3orQ==",
+      "license": "MIT"
+    },
+    "node_modules/cookie-signature": {
+      "version": "1.2.2",
+      "resolved": "https://registry.npmjs.org/cookie-signature/-/cookie-signature-1.2.2.tgz",
+      "integrity": "sha512-D76uU73ulSXrD1UXF4KE2TMxVVwhsnCgfAyTg9k8P6KGZjlXKrOLe4dJQKI3Bxi5wjesZoFXJWElNWBjPZMbhg==",
+      "license": "MIT",
+      "engines": {
+        "node": ">=6.6.0"
+      }
+    },
+    "node_modules/cors": {
+      "version": "2.8.5",
+      "resolved": "https://registry.npmjs.org/cors/-/cors-2.8.5.tgz",
+      "integrity": "sha512-KIHbLJqu73RGr/hnbrO9uBeixNGuvSQjul/jdFvS/KFSIH1hWVd1ng7zOHx+YrEfInLG7q4n6GHQ9cDtxv/P6g==",
+      "license": "MIT",
+      "dependencies": {
+        "object-assign": "^4",
+        "vary": "^1"
+      },
+      "engines": {
+        "node": ">= 0.10"
+      }
+    },
+    "node_modules/debug": {
+      "version": "4.4.1",
+      "resolved": "https://registry.npmjs.org/debug/-/debug-4.4.1.tgz",
+      "integrity": "sha512-KcKCqiftBJcZr++7ykoDIEwSa3XWowTfNPo92BYxjXiyYEVrUQh2aLyhxBCwww+heortUFxEJYcRzosstTEBYQ==",
+      "license": "MIT",
+      "dependencies": {
+        "ms": "^2.1.3"
+      },
+      "engines": {
+        "node": ">=6.0"
+      },
+      "peerDependenciesMeta": {
+        "supports-color": {
+          "optional": true
+        }
+      }
+    },
+    "node_modules/depd": {
+      "version": "2.0.0",
+      "resolved": "https://registry.npmjs.org/depd/-/depd-2.0.0.tgz",
+      "integrity": "sha512-g7nH6P6dyDioJogAAGprGpCtVImJhpPk/roCzdb3fIh61/s/nPsfR6onyMwkCAR/OlC3yBC0lESvUoQEAssIrw==",
+      "license": "MIT",
+      "engines": {
+        "node": ">= 0.8"
+      }
+    },
+    "node_modules/destroy": {
+      "version": "1.2.0",
+      "resolved": "https://registry.npmjs.org/destroy/-/destroy-1.2.0.tgz",
+      "integrity": "sha512-2sJGJTaXIIaR1w4iJSNoN0hnMY7Gpc/n8D4qSCJw8QqFWXf7cuAgnEHxBpweaVcPevC2l3KpjYCx3NypQQgaJg==",
+      "license": "MIT",
+      "engines": {
+        "node": ">= 0.8",
+        "npm": "1.2.8000 || >= 1.4.16"
+      }
+    },
+    "node_modules/dotenv": {
+      "version": "17.2.1",
+      "resolved": "https://registry.npmjs.org/dotenv/-/dotenv-17.2.1.tgz",
+      "integrity": "sha512-kQhDYKZecqnM0fCnzI5eIv5L4cAe/iRI+HqMbO/hbRdTAeXDG+M9FjipUxNfbARuEg4iHIbhnhs78BCHNbSxEQ==",
+      "license": "BSD-2-Clause",
+      "engines": {
+        "node": ">=12"
+      },
+      "funding": {
+        "url": "https://dotenvx.com"
+      }
+    },
+    "node_modules/dunder-proto": {
+      "version": "1.0.1",
+      "resolved": "https://registry.npmjs.org/dunder-proto/-/dunder-proto-1.0.1.tgz",
+      "integrity": "sha512-KIN/nDJBQRcXw0MLVhZE9iQHmG68qAVIBg9CqmUYjmQIhgij9U5MFvrqkUL5FbtyyzZuOeOt0zdeRe4UY7ct+A==",
+      "license": "MIT",
+      "dependencies": {
+        "call-bind-apply-helpers": "^1.0.1",
+        "es-errors": "^1.3.0",
+        "gopd": "^1.2.0"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      }
+    },
+    "node_modules/ee-first": {
+      "version": "1.1.1",
+      "resolved": "https://registry.npmjs.org/ee-first/-/ee-first-1.1.1.tgz",
+      "integrity": "sha512-WMwm9LhRUo+WUaRN+vRuETqG89IgZphVSNkdFgeb6sS/E4OrDIN7t48CAewSHXc6C8lefD8KKfr5vY61brQlow==",
+      "license": "MIT"
+    },
+    "node_modules/encodeurl": {
+      "version": "2.0.0",
+      "resolved": "https://registry.npmjs.org/encodeurl/-/encodeurl-2.0.0.tgz",
+      "integrity": "sha512-Q0n9HRi4m6JuGIV1eFlmvJB7ZEVxu93IrMyiMsGC0lrMJMWzRgx6WGquyfQgZVb31vhGgXnfmPNNXmxnOkRBrg==",
+      "license": "MIT",
+      "engines": {
+        "node": ">= 0.8"
+      }
+    },
+    "node_modules/es-define-property": {
+      "version": "1.0.1",
+      "resolved": "https://registry.npmjs.org/es-define-property/-/es-define-property-1.0.1.tgz",
+      "integrity": "sha512-e3nRfgfUZ4rNGL232gUgX06QNyyez04KdjFrF+LTRoOXmrOgFKDg4BCdsjW8EnT69eqdYGmRpJwiPVYNrCaW3g==",
+      "license": "MIT",
+      "engines": {
+        "node": ">= 0.4"
+      }
+    },
+    "node_modules/es-errors": {
+      "version": "1.3.0",
+      "resolved": "https://registry.npmjs.org/es-errors/-/es-errors-1.3.0.tgz",
+      "integrity": "sha512-Zf5H2Kxt2xjTvbJvP2ZWLEICxA6j+hAmMzIlypy4xcBg1vKVnx89Wy0GbS+kf5cwCVFFzdCFh2XSCFNULS6csw==",
+      "license": "MIT",
+      "engines": {
+        "node": ">= 0.4"
+      }
+    },
+    "node_modules/es-object-atoms": {
+      "version": "1.1.1",
+      "resolved": "https://registry.npmjs.org/es-object-atoms/-/es-object-atoms-1.1.1.tgz",
+      "integrity": "sha512-FGgH2h8zKNim9ljj7dankFPcICIK9Cp5bm+c2gQSYePhpaG5+esrLODihIorn+Pe6FGJzWhXQotPv73jTaldXA==",
+      "license": "MIT",
+      "dependencies": {
+        "es-errors": "^1.3.0"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      }
+    },
+    "node_modules/escape-html": {
+      "version": "1.0.3",
+      "resolved": "https://registry.npmjs.org/escape-html/-/escape-html-1.0.3.tgz",
+      "integrity": "sha512-NiSupZ4OeuGwr68lGIeym/ksIZMJodUGOSCZ/FSnTxcrekbvqrgdUxlJOMpijaKZVjAJrWrGs/6Jy8OMuyj9ow==",
+      "license": "MIT"
+    },
+    "node_modules/etag": {
+      "version": "1.8.1",
+      "resolved": "https://registry.npmjs.org/etag/-/etag-1.8.1.tgz",
+      "integrity": "sha512-aIL5Fx7mawVa300al2BnEE4iNvo1qETxLrPI/o05L7z6go7fCw1J6EQmbK4FmJ2AS7kgVF/KEZWufBfdClMcPg==",
+      "license": "MIT",
+      "engines": {
+        "node": ">= 0.6"
+      }
+    },
+    "node_modules/express": {
+      "version": "5.1.0",
+      "resolved": "https://registry.npmjs.org/express/-/express-5.1.0.tgz",
+      "integrity": "sha512-DT9ck5YIRU+8GYzzU5kT3eHGA5iL+1Zd0EutOmTE9Dtk+Tvuzd23VBU+ec7HPNSTxXYO55gPV/hq4pSBJDjFpA==",
+      "license": "MIT",
+      "dependencies": {
+        "accepts": "^2.0.0",
+        "body-parser": "^2.2.0",
+        "content-disposition": "^1.0.0",
+        "content-type": "^1.0.5",
+        "cookie": "^0.7.1",
+        "cookie-signature": "^1.2.1",
+        "debug": "^4.4.0",
+        "encodeurl": "^2.0.0",
+        "escape-html": "^1.0.3",
+        "etag": "^1.8.1",
+        "finalhandler": "^2.1.0",
+        "fresh": "^2.0.0",
+        "http-errors": "^2.0.0",
+        "merge-descriptors": "^2.0.0",
+        "mime-types": "^3.0.0",
+        "on-finished": "^2.4.1",
+        "once": "^1.4.0",
+        "parseurl": "^1.3.3",
+        "proxy-addr": "^2.0.7",
+        "qs": "^6.14.0",
+        "range-parser": "^1.2.1",
+        "router": "^2.2.0",
+        "send": "^1.1.0",
+        "serve-static": "^2.2.0",
+        "statuses": "^2.0.1",
+        "type-is": "^2.0.1",
+        "vary": "^1.1.2"
+      },
+      "engines": {
+        "node": ">= 18"
+      },
+      "funding": {
+        "type": "opencollective",
+        "url": "https://opencollective.com/express"
+      }
+    },
+    "node_modules/express-group-routes": {
+      "version": "1.1.0",
+      "resolved": "https://registry.npmjs.org/express-group-routes/-/express-group-routes-1.1.0.tgz",
+      "integrity": "sha512-KyYb90KdiPuE847Na4KIx3n2rfBQgg1QLuFO68zGJbrgnLpKu+IzglRgLA4uMZFcS2laTTebOYpy3sSnuU0u+g==",
+      "license": "MIT",
+      "dependencies": {
+        "express": "^4.13.4"
+      }
+    },
+    "node_modules/express-group-routes/node_modules/accepts": {
+      "version": "1.3.8",
+      "resolved": "https://registry.npmjs.org/accepts/-/accepts-1.3.8.tgz",
+      "integrity": "sha512-PYAthTa2m2VKxuvSD3DPC/Gy+U+sOA1LAuT8mkmRuvw+NACSaeXEQ+NHcVF7rONl6qcaxV3Uuemwawk+7+SJLw==",
+      "license": "MIT",
+      "dependencies": {
+        "mime-types": "~2.1.34",
+        "negotiator": "0.6.3"
+      },
+      "engines": {
+        "node": ">= 0.6"
+      }
+    },
+    "node_modules/express-group-routes/node_modules/body-parser": {
+      "version": "1.20.3",
+      "resolved": "https://registry.npmjs.org/body-parser/-/body-parser-1.20.3.tgz",
+      "integrity": "sha512-7rAxByjUMqQ3/bHJy7D6OGXvx/MMc4IqBn/X0fcM1QUcAItpZrBEYhWGem+tzXH90c+G01ypMcYJBO9Y30203g==",
+      "license": "MIT",
+      "dependencies": {
+        "bytes": "3.1.2",
+        "content-type": "~1.0.5",
+        "debug": "2.6.9",
+        "depd": "2.0.0",
+        "destroy": "1.2.0",
+        "http-errors": "2.0.0",
+        "iconv-lite": "0.4.24",
+        "on-finished": "2.4.1",
+        "qs": "6.13.0",
+        "raw-body": "2.5.2",
+        "type-is": "~1.6.18",
+        "unpipe": "1.0.0"
+      },
+      "engines": {
+        "node": ">= 0.8",
+        "npm": "1.2.8000 || >= 1.4.16"
+      }
+    },
+    "node_modules/express-group-routes/node_modules/content-disposition": {
+      "version": "0.5.4",
+      "resolved": "https://registry.npmjs.org/content-disposition/-/content-disposition-0.5.4.tgz",
+      "integrity": "sha512-FveZTNuGw04cxlAiWbzi6zTAL/lhehaWbTtgluJh4/E95DqMwTmha3KZN1aAWA8cFIhHzMZUvLevkw5Rqk+tSQ==",
+      "license": "MIT",
+      "dependencies": {
+        "safe-buffer": "5.2.1"
+      },
+      "engines": {
+        "node": ">= 0.6"
+      }
+    },
+    "node_modules/express-group-routes/node_modules/cookie": {
+      "version": "0.7.1",
+      "resolved": "https://registry.npmjs.org/cookie/-/cookie-0.7.1.tgz",
+      "integrity": "sha512-6DnInpx7SJ2AK3+CTUE/ZM0vWTUboZCegxhC2xiIydHR9jNuTAASBrfEpHhiGOZw/nX51bHt6YQl8jsGo4y/0w==",
+      "license": "MIT",
+      "engines": {
+        "node": ">= 0.6"
+      }
+    },
+    "node_modules/express-group-routes/node_modules/cookie-signature": {
+      "version": "1.0.6",
+      "resolved": "https://registry.npmjs.org/cookie-signature/-/cookie-signature-1.0.6.tgz",
+      "integrity": "sha512-QADzlaHc8icV8I7vbaJXJwod9HWYp8uCqf1xa4OfNu1T7JVxQIrUgOWtHdNDtPiywmFbiS12VjotIXLrKM3orQ==",
+      "license": "MIT"
+    },
+    "node_modules/express-group-routes/node_modules/debug": {
+      "version": "2.6.9",
+      "resolved": "https://registry.npmjs.org/debug/-/debug-2.6.9.tgz",
+      "integrity": "sha512-bC7ElrdJaJnPbAP+1EotYvqZsb3ecl5wi6Bfi6BJTUcNowp6cvspg0jXznRTKDjm/E7AdgFBVeAPVMNcKGsHMA==",
+      "license": "MIT",
+      "dependencies": {
+        "ms": "2.0.0"
+      }
+    },
+    "node_modules/express-group-routes/node_modules/debug/node_modules/ms": {
+      "version": "2.0.0",
+      "resolved": "https://registry.npmjs.org/ms/-/ms-2.0.0.tgz",
+      "integrity": "sha512-Tpp60P6IUJDTuOq/5Z8cdskzJujfwqfOTkrwIwj7IRISpnkJnT6SyJ4PCPnGMoFjC9ddhal5KVIYtAt97ix05A==",
+      "license": "MIT"
+    },
+    "node_modules/express-group-routes/node_modules/express": {
+      "version": "4.21.2",
+      "resolved": "https://registry.npmjs.org/express/-/express-4.21.2.tgz",
+      "integrity": "sha512-28HqgMZAmih1Czt9ny7qr6ek2qddF4FclbMzwhCREB6OFfH+rXAnuNCwo1/wFvrtbgsQDb4kSbX9de9lFbrXnA==",
+      "license": "MIT",
+      "dependencies": {
+        "accepts": "~1.3.8",
+        "array-flatten": "1.1.1",
+        "body-parser": "1.20.3",
+        "content-disposition": "0.5.4",
+        "content-type": "~1.0.4",
+        "cookie": "0.7.1",
+        "cookie-signature": "1.0.6",
+        "debug": "2.6.9",
+        "depd": "2.0.0",
+        "encodeurl": "~2.0.0",
+        "escape-html": "~1.0.3",
+        "etag": "~1.8.1",
+        "finalhandler": "1.3.1",
+        "fresh": "0.5.2",
+        "http-errors": "2.0.0",
+        "merge-descriptors": "1.0.3",
+        "methods": "~1.1.2",
+        "on-finished": "2.4.1",
+        "parseurl": "~1.3.3",
+        "path-to-regexp": "0.1.12",
+        "proxy-addr": "~2.0.7",
+        "qs": "6.13.0",
+        "range-parser": "~1.2.1",
+        "safe-buffer": "5.2.1",
+        "send": "0.19.0",
+        "serve-static": "1.16.2",
+        "setprototypeof": "1.2.0",
+        "statuses": "2.0.1",
+        "type-is": "~1.6.18",
+        "utils-merge": "1.0.1",
+        "vary": "~1.1.2"
+      },
+      "engines": {
+        "node": ">= 0.10.0"
+      },
+      "funding": {
+        "type": "opencollective",
+        "url": "https://opencollective.com/express"
+      }
+    },
+    "node_modules/express-group-routes/node_modules/finalhandler": {
+      "version": "1.3.1",
+      "resolved": "https://registry.npmjs.org/finalhandler/-/finalhandler-1.3.1.tgz",
+      "integrity": "sha512-6BN9trH7bp3qvnrRyzsBz+g3lZxTNZTbVO2EV1CS0WIcDbawYVdYvGflME/9QP0h0pYlCDBCTjYa9nZzMDpyxQ==",
+      "license": "MIT",
+      "dependencies": {
+        "debug": "2.6.9",
+        "encodeurl": "~2.0.0",
+        "escape-html": "~1.0.3",
+        "on-finished": "2.4.1",
+        "parseurl": "~1.3.3",
+        "statuses": "2.0.1",
+        "unpipe": "~1.0.0"
+      },
+      "engines": {
+        "node": ">= 0.8"
+      }
+    },
+    "node_modules/express-group-routes/node_modules/fresh": {
+      "version": "0.5.2",
+      "resolved": "https://registry.npmjs.org/fresh/-/fresh-0.5.2.tgz",
+      "integrity": "sha512-zJ2mQYM18rEFOudeV4GShTGIQ7RbzA7ozbU9I/XBpm7kqgMywgmylMwXHxZJmkVoYkna9d2pVXVXPdYTP9ej8Q==",
+      "license": "MIT",
+      "engines": {
+        "node": ">= 0.6"
+      }
+    },
+    "node_modules/express-group-routes/node_modules/iconv-lite": {
+      "version": "0.4.24",
+      "resolved": "https://registry.npmjs.org/iconv-lite/-/iconv-lite-0.4.24.tgz",
+      "integrity": "sha512-v3MXnZAcvnywkTUEZomIActle7RXXeedOR31wwl7VlyoXO4Qi9arvSenNQWne1TcRwhCL1HwLI21bEqdpj8/rA==",
+      "license": "MIT",
+      "dependencies": {
+        "safer-buffer": ">= 2.1.2 < 3"
+      },
+      "engines": {
+        "node": ">=0.10.0"
+      }
+    },
+    "node_modules/express-group-routes/node_modules/media-typer": {
+      "version": "0.3.0",
+      "resolved": "https://registry.npmjs.org/media-typer/-/media-typer-0.3.0.tgz",
+      "integrity": "sha512-dq+qelQ9akHpcOl/gUVRTxVIOkAJ1wR3QAvb4RsVjS8oVoFjDGTc679wJYmUmknUF5HwMLOgb5O+a3KxfWapPQ==",
+      "license": "MIT",
+      "engines": {
+        "node": ">= 0.6"
+      }
+    },
+    "node_modules/express-group-routes/node_modules/merge-descriptors": {
+      "version": "1.0.3",
+      "resolved": "https://registry.npmjs.org/merge-descriptors/-/merge-descriptors-1.0.3.tgz",
+      "integrity": "sha512-gaNvAS7TZ897/rVaZ0nMtAyxNyi/pdbjbAwUpFQpN70GqnVfOiXpeUUMKRBmzXaSQ8DdTX4/0ms62r2K+hE6mQ==",
+      "license": "MIT",
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
+      }
+    },
+    "node_modules/express-group-routes/node_modules/mime-db": {
+      "version": "1.52.0",
+      "resolved": "https://registry.npmjs.org/mime-db/-/mime-db-1.52.0.tgz",
+      "integrity": "sha512-sPU4uV7dYlvtWJxwwxHD0PuihVNiE7TyAbQ5SWxDCB9mUYvOgroQOwYQQOKPJ8CIbE+1ETVlOoK1UC2nU3gYvg==",
+      "license": "MIT",
+      "engines": {
+        "node": ">= 0.6"
+      }
+    },
+    "node_modules/express-group-routes/node_modules/mime-types": {
+      "version": "2.1.35",
+      "resolved": "https://registry.npmjs.org/mime-types/-/mime-types-2.1.35.tgz",
+      "integrity": "sha512-ZDY+bPm5zTTF+YpCrAU9nK0UgICYPT0QtT1NZWFv4s++TNkcgVaT0g6+4R2uI4MjQjzysHB1zxuWL50hzaeXiw==",
+      "license": "MIT",
+      "dependencies": {
+        "mime-db": "1.52.0"
+      },
+      "engines": {
+        "node": ">= 0.6"
+      }
+    },
+    "node_modules/express-group-routes/node_modules/negotiator": {
+      "version": "0.6.3",
+      "resolved": "https://registry.npmjs.org/negotiator/-/negotiator-0.6.3.tgz",
+      "integrity": "sha512-+EUsqGPLsM+j/zdChZjsnX51g4XrHFOIXwfnCVPGlQk/k5giakcKsuxCObBRu6DSm9opw/O6slWbJdghQM4bBg==",
+      "license": "MIT",
+      "engines": {
+        "node": ">= 0.6"
+      }
+    },
+    "node_modules/express-group-routes/node_modules/path-to-regexp": {
+      "version": "0.1.12",
+      "resolved": "https://registry.npmjs.org/path-to-regexp/-/path-to-regexp-0.1.12.tgz",
+      "integrity": "sha512-RA1GjUVMnvYFxuqovrEqZoxxW5NUZqbwKtYz/Tt7nXerk0LbLblQmrsgdeOxV5SFHf0UDggjS/bSeOZwt1pmEQ==",
+      "license": "MIT"
+    },
+    "node_modules/express-group-routes/node_modules/qs": {
+      "version": "6.13.0",
+      "resolved": "https://registry.npmjs.org/qs/-/qs-6.13.0.tgz",
+      "integrity": "sha512-+38qI9SOr8tfZ4QmJNplMUxqjbe7LKvvZgWdExBOmd+egZTtjLB67Gu0HRX3u/XOq7UU2Nx6nsjvS16Z9uwfpg==",
+      "license": "BSD-3-Clause",
+      "dependencies": {
+        "side-channel": "^1.0.6"
+      },
+      "engines": {
+        "node": ">=0.6"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/express-group-routes/node_modules/raw-body": {
+      "version": "2.5.2",
+      "resolved": "https://registry.npmjs.org/raw-body/-/raw-body-2.5.2.tgz",
+      "integrity": "sha512-8zGqypfENjCIqGhgXToC8aB2r7YrBX+AQAfIPs/Mlk+BtPTztOvTS01NRW/3Eh60J+a48lt8qsCzirQ6loCVfA==",
+      "license": "MIT",
+      "dependencies": {
+        "bytes": "3.1.2",
+        "http-errors": "2.0.0",
+        "iconv-lite": "0.4.24",
+        "unpipe": "1.0.0"
+      },
+      "engines": {
+        "node": ">= 0.8"
+      }
+    },
+    "node_modules/express-group-routes/node_modules/send": {
+      "version": "0.19.0",
+      "resolved": "https://registry.npmjs.org/send/-/send-0.19.0.tgz",
+      "integrity": "sha512-dW41u5VfLXu8SJh5bwRmyYUbAoSB3c9uQh6L8h/KtsFREPWpbX1lrljJo186Jc4nmci/sGUZ9a0a0J2zgfq2hw==",
+      "license": "MIT",
+      "dependencies": {
+        "debug": "2.6.9",
+        "depd": "2.0.0",
+        "destroy": "1.2.0",
+        "encodeurl": "~1.0.2",
+        "escape-html": "~1.0.3",
+        "etag": "~1.8.1",
+        "fresh": "0.5.2",
+        "http-errors": "2.0.0",
+        "mime": "1.6.0",
+        "ms": "2.1.3",
+        "on-finished": "2.4.1",
+        "range-parser": "~1.2.1",
+        "statuses": "2.0.1"
+      },
+      "engines": {
+        "node": ">= 0.8.0"
+      }
+    },
+    "node_modules/express-group-routes/node_modules/send/node_modules/encodeurl": {
+      "version": "1.0.2",
+      "resolved": "https://registry.npmjs.org/encodeurl/-/encodeurl-1.0.2.tgz",
+      "integrity": "sha512-TPJXq8JqFaVYm2CWmPvnP2Iyo4ZSM7/QKcSmuMLDObfpH5fi7RUGmd/rTDf+rut/saiDiQEeVTNgAmJEdAOx0w==",
+      "license": "MIT",
+      "engines": {
+        "node": ">= 0.8"
+      }
+    },
+    "node_modules/express-group-routes/node_modules/serve-static": {
+      "version": "1.16.2",
+      "resolved": "https://registry.npmjs.org/serve-static/-/serve-static-1.16.2.tgz",
+      "integrity": "sha512-VqpjJZKadQB/PEbEwvFdO43Ax5dFBZ2UECszz8bQ7pi7wt//PWe1P6MN7eCnjsatYtBT6EuiClbjSWP2WrIoTw==",
+      "license": "MIT",
+      "dependencies": {
+        "encodeurl": "~2.0.0",
+        "escape-html": "~1.0.3",
+        "parseurl": "~1.3.3",
+        "send": "0.19.0"
+      },
+      "engines": {
+        "node": ">= 0.8.0"
+      }
+    },
+    "node_modules/express-group-routes/node_modules/statuses": {
+      "version": "2.0.1",
+      "resolved": "https://registry.npmjs.org/statuses/-/statuses-2.0.1.tgz",
+      "integrity": "sha512-RwNA9Z/7PrK06rYLIzFMlaF+l73iwpzsqRIFgbMLbTcLD6cOao82TaWefPXQvB2fOC4AjuYSEndS7N/mTCbkdQ==",
+      "license": "MIT",
+      "engines": {
+        "node": ">= 0.8"
+      }
+    },
+    "node_modules/express-group-routes/node_modules/type-is": {
+      "version": "1.6.18",
+      "resolved": "https://registry.npmjs.org/type-is/-/type-is-1.6.18.tgz",
+      "integrity": "sha512-TkRKr9sUTxEH8MdfuCSP7VizJyzRNMjj2J2do2Jr3Kym598JVdEksuzPQCnlFPW4ky9Q+iA+ma9BGm06XQBy8g==",
+      "license": "MIT",
+      "dependencies": {
+        "media-typer": "0.3.0",
+        "mime-types": "~2.1.24"
+      },
+      "engines": {
+        "node": ">= 0.6"
+      }
+    },
+    "node_modules/fill-range": {
+      "version": "7.1.1",
+      "resolved": "https://registry.npmjs.org/fill-range/-/fill-range-7.1.1.tgz",
+      "integrity": "sha512-YsGpe3WHLK8ZYi4tWDg2Jy3ebRz2rXowDxnld4bkQB00cc/1Zw9AWnC0i9ztDJitivtQvaI9KaLyKrc+hBW0yg==",
+      "license": "MIT",
+      "dependencies": {
+        "to-regex-range": "^5.0.1"
+      },
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/finalhandler": {
+      "version": "2.1.0",
+      "resolved": "https://registry.npmjs.org/finalhandler/-/finalhandler-2.1.0.tgz",
+      "integrity": "sha512-/t88Ty3d5JWQbWYgaOGCCYfXRwV1+be02WqYYlL6h0lEiUAMPM8o8qKGO01YIkOHzka2up08wvgYD0mDiI+q3Q==",
+      "license": "MIT",
+      "dependencies": {
+        "debug": "^4.4.0",
+        "encodeurl": "^2.0.0",
+        "escape-html": "^1.0.3",
+        "on-finished": "^2.4.1",
+        "parseurl": "^1.3.3",
+        "statuses": "^2.0.1"
+      },
+      "engines": {
+        "node": ">= 0.8"
+      }
+    },
+    "node_modules/forwarded": {
+      "version": "0.2.0",
+      "resolved": "https://registry.npmjs.org/forwarded/-/forwarded-0.2.0.tgz",
+      "integrity": "sha512-buRG0fpBtRHSTCOASe6hD258tEubFoRLb4ZNA6NxMVHNw2gOcwHo9wyablzMzOA5z9xA9L1KNjk/Nt6MT9aYow==",
+      "license": "MIT",
+      "engines": {
+        "node": ">= 0.6"
+      }
+    },
+    "node_modules/fresh": {
+      "version": "2.0.0",
+      "resolved": "https://registry.npmjs.org/fresh/-/fresh-2.0.0.tgz",
+      "integrity": "sha512-Rx/WycZ60HOaqLKAi6cHRKKI7zxWbJ31MhntmtwMoaTeF7XFH9hhBp8vITaMidfljRQ6eYWCKkaTK+ykVJHP2A==",
+      "license": "MIT",
+      "engines": {
+        "node": ">= 0.8"
+      }
+    },
+    "node_modules/fsevents": {
+      "version": "2.3.3",
+      "resolved": "https://registry.npmjs.org/fsevents/-/fsevents-2.3.3.tgz",
+      "integrity": "sha512-5xoDfX+fL7faATnagmWPpbFtwh/R77WmMMqqHGS65C3vvB0YHrgF+B1YmZ3441tMj5n63k0212XNoJwzlhffQw==",
+      "hasInstallScript": true,
+      "license": "MIT",
+      "optional": true,
+      "os": [
+        "darwin"
+      ],
+      "engines": {
+        "node": "^8.16.0 || ^10.6.0 || >=11.0.0"
+      }
+    },
+    "node_modules/function-bind": {
+      "version": "1.1.2",
+      "resolved": "https://registry.npmjs.org/function-bind/-/function-bind-1.1.2.tgz",
+      "integrity": "sha512-7XHNxH7qX9xG5mIwxkhumTox/MIRNcOgDrxWsMt2pAr23WHp6MrRlN7FBSFpCpr+oVO0F744iUgR82nJMfG2SA==",
+      "license": "MIT",
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/get-intrinsic": {
+      "version": "1.3.0",
+      "resolved": "https://registry.npmjs.org/get-intrinsic/-/get-intrinsic-1.3.0.tgz",
+      "integrity": "sha512-9fSjSaos/fRIVIp+xSJlE6lfwhES7LNtKaCBIamHsjr2na1BiABJPo0mOjjz8GJDURarmCPGqaiVg5mfjb98CQ==",
+      "license": "MIT",
+      "dependencies": {
+        "call-bind-apply-helpers": "^1.0.2",
+        "es-define-property": "^1.0.1",
+        "es-errors": "^1.3.0",
+        "es-object-atoms": "^1.1.1",
+        "function-bind": "^1.1.2",
+        "get-proto": "^1.0.1",
+        "gopd": "^1.2.0",
+        "has-symbols": "^1.1.0",
+        "hasown": "^2.0.2",
+        "math-intrinsics": "^1.1.0"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/get-proto": {
+      "version": "1.0.1",
+      "resolved": "https://registry.npmjs.org/get-proto/-/get-proto-1.0.1.tgz",
+      "integrity": "sha512-sTSfBjoXBp89JvIKIefqw7U2CCebsc74kiY6awiGogKtoSGbgjYE/G/+l9sF3MWFPNc9IcoOC4ODfKHfxFmp0g==",
+      "license": "MIT",
+      "dependencies": {
+        "dunder-proto": "^1.0.1",
+        "es-object-atoms": "^1.0.0"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      }
+    },
+    "node_modules/glob-parent": {
+      "version": "5.1.2",
+      "resolved": "https://registry.npmjs.org/glob-parent/-/glob-parent-5.1.2.tgz",
+      "integrity": "sha512-AOIgSQCepiJYwP3ARnGx+5VnTu2HBYdzbGP45eLw1vr3zB3vZLeyed1sC9hnbcOc9/SrMyM5RPQrkGz4aS9Zow==",
+      "license": "ISC",
+      "dependencies": {
+        "is-glob": "^4.0.1"
+      },
+      "engines": {
+        "node": ">= 6"
+      }
+    },
+    "node_modules/gopd": {
+      "version": "1.2.0",
+      "resolved": "https://registry.npmjs.org/gopd/-/gopd-1.2.0.tgz",
+      "integrity": "sha512-ZUKRh6/kUFoAiTAtTYPZJ3hw9wNxx+BIBOijnlG9PnrJsCcSjs1wyyD6vJpaYtgnzDrKYRSqf3OO6Rfa93xsRg==",
+      "license": "MIT",
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/has-flag": {
+      "version": "3.0.0",
+      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-3.0.0.tgz",
+      "integrity": "sha512-sKJf1+ceQBr4SMkvQnBDNDtf4TXpVhVGateu0t918bl30FnbE2m4vNLX+VWe/dpjlb+HugGYzW7uQXH98HPEYw==",
+      "license": "MIT",
+      "engines": {
+        "node": ">=4"
+      }
+    },
+    "node_modules/has-symbols": {
+      "version": "1.1.0",
+      "resolved": "https://registry.npmjs.org/has-symbols/-/has-symbols-1.1.0.tgz",
+      "integrity": "sha512-1cDNdwJ2Jaohmb3sg4OmKaMBwuC48sYni5HUw2DvsC8LjGTLK9h+eb1X6RyuOHe4hT0ULCW68iomhjUoKUqlPQ==",
+      "license": "MIT",
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/hasown": {
+      "version": "2.0.2",
+      "resolved": "https://registry.npmjs.org/hasown/-/hasown-2.0.2.tgz",
+      "integrity": "sha512-0hJU9SCPvmMzIBdZFqNPXWa6dqh7WdH0cII9y+CyS8rG3nL48Bclra9HmKhVVUHyPWNH5Y7xDwAB7bfgSjkUMQ==",
+      "license": "MIT",
+      "dependencies": {
+        "function-bind": "^1.1.2"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      }
+    },
+    "node_modules/http": {
+      "version": "0.0.1-security",
+      "resolved": "https://registry.npmjs.org/http/-/http-0.0.1-security.tgz",
+      "integrity": "sha512-RnDvP10Ty9FxqOtPZuxtebw1j4L/WiqNMDtuc1YMH1XQm5TgDRaR1G9u8upL6KD1bXHSp9eSXo/ED+8Q7FAr+g=="
+    },
+    "node_modules/http-errors": {
+      "version": "2.0.0",
+      "resolved": "https://registry.npmjs.org/http-errors/-/http-errors-2.0.0.tgz",
+      "integrity": "sha512-FtwrG/euBzaEjYeRqOgly7G0qviiXoJWnvEH2Z1plBdXgbyjv34pHTSb9zoeHMyDy33+DWy5Wt9Wo+TURtOYSQ==",
+      "license": "MIT",
+      "dependencies": {
+        "depd": "2.0.0",
+        "inherits": "2.0.4",
+        "setprototypeof": "1.2.0",
+        "statuses": "2.0.1",
+        "toidentifier": "1.0.1"
+      },
+      "engines": {
+        "node": ">= 0.8"
+      }
+    },
+    "node_modules/http-errors/node_modules/statuses": {
+      "version": "2.0.1",
+      "resolved": "https://registry.npmjs.org/statuses/-/statuses-2.0.1.tgz",
+      "integrity": "sha512-RwNA9Z/7PrK06rYLIzFMlaF+l73iwpzsqRIFgbMLbTcLD6cOao82TaWefPXQvB2fOC4AjuYSEndS7N/mTCbkdQ==",
+      "license": "MIT",
+      "engines": {
+        "node": ">= 0.8"
+      }
+    },
+    "node_modules/iconv-lite": {
+      "version": "0.6.3",
+      "resolved": "https://registry.npmjs.org/iconv-lite/-/iconv-lite-0.6.3.tgz",
+      "integrity": "sha512-4fCk79wshMdzMp2rH06qWrJE4iolqLhCUH+OiuIgU++RB0+94NlDL81atO7GX55uUKueo0txHNtvEyI6D7WdMw==",
+      "license": "MIT",
+      "dependencies": {
+        "safer-buffer": ">= 2.1.2 < 3.0.0"
+      },
+      "engines": {
+        "node": ">=0.10.0"
+      }
+    },
+    "node_modules/ignore-by-default": {
+      "version": "1.0.1",
+      "resolved": "https://registry.npmjs.org/ignore-by-default/-/ignore-by-default-1.0.1.tgz",
+      "integrity": "sha512-Ius2VYcGNk7T90CppJqcIkS5ooHUZyIQK+ClZfMfMNFEF9VSE73Fq+906u/CWu92x4gzZMWOwfFYckPObzdEbA==",
+      "license": "ISC"
+    },
+    "node_modules/inherits": {
+      "version": "2.0.4",
+      "resolved": "https://registry.npmjs.org/inherits/-/inherits-2.0.4.tgz",
+      "integrity": "sha512-k/vGaX4/Yla3WzyMCvTQOXYeIHvqOKtnqBduzTHpzpQZzAskKMhZ2K+EnBiSM9zGSoIFeMpXKxa4dYeZIQqewQ==",
+      "license": "ISC"
+    },
+    "node_modules/ipaddr.js": {
+      "version": "1.9.1",
+      "resolved": "https://registry.npmjs.org/ipaddr.js/-/ipaddr.js-1.9.1.tgz",
+      "integrity": "sha512-0KI/607xoxSToH7GjN1FfSbLoU0+btTicjsQSWQlh/hZykN8KpmMf7uYwPW3R+akZ6R/w18ZlXSHBYXiYUPO3g==",
+      "license": "MIT",
+      "engines": {
+        "node": ">= 0.10"
+      }
+    },
+    "node_modules/is-binary-path": {
+      "version": "2.1.0",
+      "resolved": "https://registry.npmjs.org/is-binary-path/-/is-binary-path-2.1.0.tgz",
+      "integrity": "sha512-ZMERYes6pDydyuGidse7OsHxtbI7WVeUEozgR/g7rd0xUimYNlvZRE/K2MgZTjWy725IfelLeVcEM97mmtRGXw==",
+      "license": "MIT",
+      "dependencies": {
+        "binary-extensions": "^2.0.0"
+      },
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/is-extglob": {
+      "version": "2.1.1",
+      "resolved": "https://registry.npmjs.org/is-extglob/-/is-extglob-2.1.1.tgz",
+      "integrity": "sha512-SbKbANkN603Vi4jEZv49LeVJMn4yGwsbzZworEoyEiutsN3nJYdbO36zfhGJ6QEDpOZIFkDtnq5JRxmvl3jsoQ==",
+      "license": "MIT",
+      "engines": {
+        "node": ">=0.10.0"
+      }
+    },
+    "node_modules/is-glob": {
+      "version": "4.0.3",
+      "resolved": "https://registry.npmjs.org/is-glob/-/is-glob-4.0.3.tgz",
+      "integrity": "sha512-xelSayHH36ZgE7ZWhli7pW34hNbNl8Ojv5KVmkJD4hBdD3th8Tfk9vYasLM+mXWOZhFkgZfxhLSnrwRr4elSSg==",
+      "license": "MIT",
+      "dependencies": {
+        "is-extglob": "^2.1.1"
+      },
+      "engines": {
+        "node": ">=0.10.0"
+      }
+    },
+    "node_modules/is-number": {
+      "version": "7.0.0",
+      "resolved": "https://registry.npmjs.org/is-number/-/is-number-7.0.0.tgz",
+      "integrity": "sha512-41Cifkg6e8TylSpdtTpeLVMqvSBEVzTttHvERD741+pnZ8ANv0004MRL43QKPDlK9cGvNp6NZWZUBlbGXYxxng==",
+      "license": "MIT",
+      "engines": {
+        "node": ">=0.12.0"
+      }
+    },
+    "node_modules/is-promise": {
+      "version": "4.0.0",
+      "resolved": "https://registry.npmjs.org/is-promise/-/is-promise-4.0.0.tgz",
+      "integrity": "sha512-hvpoI6korhJMnej285dSg6nu1+e6uxs7zG3BYAm5byqDsgJNWwxzM6z6iZiAgQR4TJ30JmBTOwqZUw3WlyH3AQ==",
+      "license": "MIT"
+    },
+    "node_modules/math-intrinsics": {
+      "version": "1.1.0",
+      "resolved": "https://registry.npmjs.org/math-intrinsics/-/math-intrinsics-1.1.0.tgz",
+      "integrity": "sha512-/IXtbwEk5HTPyEwyKX6hGkYXxM9nbj64B+ilVJnC/R6B0pH5G4V3b0pVbL7DBj4tkhBAppbQUlf6F6Xl9LHu1g==",
+      "license": "MIT",
+      "engines": {
+        "node": ">= 0.4"
+      }
+    },
+    "node_modules/media-typer": {
+      "version": "1.1.0",
+      "resolved": "https://registry.npmjs.org/media-typer/-/media-typer-1.1.0.tgz",
+      "integrity": "sha512-aisnrDP4GNe06UcKFnV5bfMNPBUw4jsLGaWwWfnH3v02GnBuXX2MCVn5RbrWo0j3pczUilYblq7fQ7Nw2t5XKw==",
+      "license": "MIT",
+      "engines": {
+        "node": ">= 0.8"
+      }
+    },
+    "node_modules/merge-descriptors": {
+      "version": "2.0.0",
+      "resolved": "https://registry.npmjs.org/merge-descriptors/-/merge-descriptors-2.0.0.tgz",
+      "integrity": "sha512-Snk314V5ayFLhp3fkUREub6WtjBfPdCPY1Ln8/8munuLuiYhsABgBVWsozAG+MWMbVEvcdcpbi9R7ww22l9Q3g==",
+      "license": "MIT",
+      "engines": {
+        "node": ">=18"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
+      }
+    },
+    "node_modules/methods": {
+      "version": "1.1.2",
+      "resolved": "https://registry.npmjs.org/methods/-/methods-1.1.2.tgz",
+      "integrity": "sha512-iclAHeNqNm68zFtnZ0e+1L2yUIdvzNoauKU4WBA3VvH/vPFieF7qfRlwUZU+DA9P9bPXIS90ulxoUoCH23sV2w==",
+      "license": "MIT",
+      "engines": {
+        "node": ">= 0.6"
+      }
+    },
+    "node_modules/mime": {
+      "version": "1.6.0",
+      "resolved": "https://registry.npmjs.org/mime/-/mime-1.6.0.tgz",
+      "integrity": "sha512-x0Vn8spI+wuJ1O6S7gnbaQg8Pxh4NNHb7KSINmEWKiPE4RKOplvijn+NkmYmmRgP68mc70j2EbeTFRsrswaQeg==",
+      "license": "MIT",
+      "bin": {
+        "mime": "cli.js"
+      },
+      "engines": {
+        "node": ">=4"
+      }
+    },
+    "node_modules/mime-db": {
+      "version": "1.54.0",
+      "resolved": "https://registry.npmjs.org/mime-db/-/mime-db-1.54.0.tgz",
+      "integrity": "sha512-aU5EJuIN2WDemCcAp2vFBfp/m4EAhWJnUNSSw0ixs7/kXbd6Pg64EmwJkNdFhB8aWt1sH2CTXrLxo/iAGV3oPQ==",
+      "license": "MIT",
+      "engines": {
+        "node": ">= 0.6"
+      }
+    },
+    "node_modules/mime-types": {
+      "version": "3.0.1",
+      "resolved": "https://registry.npmjs.org/mime-types/-/mime-types-3.0.1.tgz",
+      "integrity": "sha512-xRc4oEhT6eaBpU1XF7AjpOFD+xQmXNB5OVKwp4tqCuBpHLS/ZbBDrc07mYTDqVMg6PfxUjjNp85O6Cd2Z/5HWA==",
+      "license": "MIT",
+      "dependencies": {
+        "mime-db": "^1.54.0"
+      },
+      "engines": {
+        "node": ">= 0.6"
+      }
+    },
+    "node_modules/minimatch": {
+      "version": "3.1.2",
+      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-3.1.2.tgz",
+      "integrity": "sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==",
+      "license": "ISC",
+      "dependencies": {
+        "brace-expansion": "^1.1.7"
+      },
+      "engines": {
+        "node": "*"
+      }
+    },
+    "node_modules/ms": {
+      "version": "2.1.3",
+      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
+      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==",
+      "license": "MIT"
+    },
+    "node_modules/negotiator": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/negotiator/-/negotiator-1.0.0.tgz",
+      "integrity": "sha512-8Ofs/AUQh8MaEcrlq5xOX0CQ9ypTF5dl78mjlMNfOK08fzpgTHQRQPBxcPlEtIw0yRpws+Zo/3r+5WRby7u3Gg==",
+      "license": "MIT",
+      "engines": {
+        "node": ">= 0.6"
+      }
+    },
+    "node_modules/nodemon": {
+      "version": "3.1.10",
+      "resolved": "https://registry.npmjs.org/nodemon/-/nodemon-3.1.10.tgz",
+      "integrity": "sha512-WDjw3pJ0/0jMFmyNDp3gvY2YizjLmmOUQo6DEBY+JgdvW/yQ9mEeSw6H5ythl5Ny2ytb7f9C2nIbjSxMNzbJXw==",
+      "license": "MIT",
+      "dependencies": {
+        "chokidar": "^3.5.2",
+        "debug": "^4",
+        "ignore-by-default": "^1.0.1",
+        "minimatch": "^3.1.2",
+        "pstree.remy": "^1.1.8",
+        "semver": "^7.5.3",
+        "simple-update-notifier": "^2.0.0",
+        "supports-color": "^5.5.0",
+        "touch": "^3.1.0",
+        "undefsafe": "^2.0.5"
+      },
+      "bin": {
+        "nodemon": "bin/nodemon.js"
+      },
+      "engines": {
+        "node": ">=10"
+      },
+      "funding": {
+        "type": "opencollective",
+        "url": "https://opencollective.com/nodemon"
+      }
+    },
+    "node_modules/normalize-path": {
+      "version": "3.0.0",
+      "resolved": "https://registry.npmjs.org/normalize-path/-/normalize-path-3.0.0.tgz",
+      "integrity": "sha512-6eZs5Ls3WtCisHWp9S2GUy8dqkpGi4BVSz3GaqiE6ezub0512ESztXUwUB6C6IKbQkY2Pnb/mD4WYojCRwcwLA==",
+      "license": "MIT",
+      "engines": {
+        "node": ">=0.10.0"
+      }
+    },
+    "node_modules/object-assign": {
+      "version": "4.1.1",
+      "resolved": "https://registry.npmjs.org/object-assign/-/object-assign-4.1.1.tgz",
+      "integrity": "sha512-rJgTQnkUnH1sFw8yT6VSU3zD3sWmu6sZhIseY8VX+GRu3P6F7Fu+JNDoXfklElbLJSnc3FUQHVe4cU5hj+BcUg==",
+      "license": "MIT",
+      "engines": {
+        "node": ">=0.10.0"
+      }
+    },
+    "node_modules/object-inspect": {
+      "version": "1.13.4",
+      "resolved": "https://registry.npmjs.org/object-inspect/-/object-inspect-1.13.4.tgz",
+      "integrity": "sha512-W67iLl4J2EXEGTbfeHCffrjDfitvLANg0UlX3wFUUSTx92KXRFegMHUVgSqE+wvhAbi4WqjGg9czysTV2Epbew==",
+      "license": "MIT",
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/on-finished": {
+      "version": "2.4.1",
+      "resolved": "https://registry.npmjs.org/on-finished/-/on-finished-2.4.1.tgz",
+      "integrity": "sha512-oVlzkg3ENAhCk2zdv7IJwd/QUD4z2RxRwpkcGY8psCVcCYZNq4wYnVWALHM+brtuJjePWiYF/ClmuDr8Ch5+kg==",
+      "license": "MIT",
+      "dependencies": {
+        "ee-first": "1.1.1"
+      },
+      "engines": {
+        "node": ">= 0.8"
+      }
+    },
+    "node_modules/once": {
+      "version": "1.4.0",
+      "resolved": "https://registry.npmjs.org/once/-/once-1.4.0.tgz",
+      "integrity": "sha512-lNaJgI+2Q5URQBkccEKHTQOPaXdUxnZZElQTZY0MFUAuaEqe1E+Nyvgdz/aIyNi6Z9MzO5dv1H8n58/GELp3+w==",
+      "license": "ISC",
+      "dependencies": {
+        "wrappy": "1"
+      }
+    },
+    "node_modules/parseurl": {
+      "version": "1.3.3",
+      "resolved": "https://registry.npmjs.org/parseurl/-/parseurl-1.3.3.tgz",
+      "integrity": "sha512-CiyeOxFT/JZyN5m0z9PfXw4SCBJ6Sygz1Dpl0wqjlhDEGGBP1GnsUVEL0p63hoG1fcj3fHynXi9NYO4nWOL+qQ==",
+      "license": "MIT",
+      "engines": {
+        "node": ">= 0.8"
+      }
+    },
+    "node_modules/path-to-regexp": {
+      "version": "8.2.0",
+      "resolved": "https://registry.npmjs.org/path-to-regexp/-/path-to-regexp-8.2.0.tgz",
+      "integrity": "sha512-TdrF7fW9Rphjq4RjrW0Kp2AW0Ahwu9sRGTkS6bvDi0SCwZlEZYmcfDbEsTz8RVk0EHIS/Vd1bv3JhG+1xZuAyQ==",
+      "license": "MIT",
+      "engines": {
+        "node": ">=16"
+      }
+    },
+    "node_modules/picomatch": {
+      "version": "2.3.1",
+      "resolved": "https://registry.npmjs.org/picomatch/-/picomatch-2.3.1.tgz",
+      "integrity": "sha512-JU3teHTNjmE2VCGFzuY8EXzCDVwEqB2a8fsIvwaStHhAWJEeVd1o1QD80CU6+ZdEXXSLbSsuLwJjkCBWqRQUVA==",
+      "license": "MIT",
+      "engines": {
+        "node": ">=8.6"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/jonschlinkert"
+      }
+    },
+    "node_modules/proxy-addr": {
+      "version": "2.0.7",
+      "resolved": "https://registry.npmjs.org/proxy-addr/-/proxy-addr-2.0.7.tgz",
+      "integrity": "sha512-llQsMLSUDUPT44jdrU/O37qlnifitDP+ZwrmmZcoSKyLKvtZxpyV0n2/bD/N4tBAAZ/gJEdZU7KMraoK1+XYAg==",
+      "license": "MIT",
+      "dependencies": {
+        "forwarded": "0.2.0",
+        "ipaddr.js": "1.9.1"
+      },
+      "engines": {
+        "node": ">= 0.10"
+      }
+    },
+    "node_modules/pstree.remy": {
+      "version": "1.1.8",
+      "resolved": "https://registry.npmjs.org/pstree.remy/-/pstree.remy-1.1.8.tgz",
+      "integrity": "sha512-77DZwxQmxKnu3aR542U+X8FypNzbfJ+C5XQDk3uWjWxn6151aIMGthWYRXTqT1E5oJvg+ljaa2OJi+VfvCOQ8w==",
+      "license": "MIT"
+    },
+    "node_modules/qs": {
+      "version": "6.14.0",
+      "resolved": "https://registry.npmjs.org/qs/-/qs-6.14.0.tgz",
+      "integrity": "sha512-YWWTjgABSKcvs/nWBi9PycY/JiPJqOD4JA6o9Sej2AtvSGarXxKC3OQSk4pAarbdQlKAh5D4FCQkJNkW+GAn3w==",
+      "license": "BSD-3-Clause",
+      "dependencies": {
+        "side-channel": "^1.1.0"
+      },
+      "engines": {
+        "node": ">=0.6"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/range-parser": {
+      "version": "1.2.1",
+      "resolved": "https://registry.npmjs.org/range-parser/-/range-parser-1.2.1.tgz",
+      "integrity": "sha512-Hrgsx+orqoygnmhFbKaHE6c296J+HTAQXoxEF6gNupROmmGJRoyzfG3ccAveqCBrwr/2yxQ5BVd/GTl5agOwSg==",
+      "license": "MIT",
+      "engines": {
+        "node": ">= 0.6"
+      }
+    },
+    "node_modules/raw-body": {
+      "version": "3.0.0",
+      "resolved": "https://registry.npmjs.org/raw-body/-/raw-body-3.0.0.tgz",
+      "integrity": "sha512-RmkhL8CAyCRPXCE28MMH0z2PNWQBNk2Q09ZdxM9IOOXwxwZbN+qbWaatPkdkWIKL2ZVDImrN/pK5HTRz2PcS4g==",
+      "license": "MIT",
+      "dependencies": {
+        "bytes": "3.1.2",
+        "http-errors": "2.0.0",
+        "iconv-lite": "0.6.3",
+        "unpipe": "1.0.0"
+      },
+      "engines": {
+        "node": ">= 0.8"
+      }
+    },
+    "node_modules/readdirp": {
+      "version": "3.6.0",
+      "resolved": "https://registry.npmjs.org/readdirp/-/readdirp-3.6.0.tgz",
+      "integrity": "sha512-hOS089on8RduqdbhvQ5Z37A0ESjsqz6qnRcffsMU3495FuTdqSm+7bhJ29JvIOsBDEEnan5DPu9t3To9VRlMzA==",
+      "license": "MIT",
+      "dependencies": {
+        "picomatch": "^2.2.1"
+      },
+      "engines": {
+        "node": ">=8.10.0"
+      }
+    },
+    "node_modules/router": {
+      "version": "2.2.0",
+      "resolved": "https://registry.npmjs.org/router/-/router-2.2.0.tgz",
+      "integrity": "sha512-nLTrUKm2UyiL7rlhapu/Zl45FwNgkZGaCpZbIHajDYgwlJCOzLSk+cIPAnsEqV955GjILJnKbdQC1nVPz+gAYQ==",
+      "license": "MIT",
+      "dependencies": {
+        "debug": "^4.4.0",
+        "depd": "^2.0.0",
+        "is-promise": "^4.0.0",
+        "parseurl": "^1.3.3",
+        "path-to-regexp": "^8.0.0"
+      },
+      "engines": {
+        "node": ">= 18"
+      }
+    },
+    "node_modules/safe-buffer": {
+      "version": "5.2.1",
+      "resolved": "https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.2.1.tgz",
+      "integrity": "sha512-rp3So07KcdmmKbGvgaNxQSJr7bGVSVk5S9Eq1F+ppbRo70+YeaDxkw5Dd8NPN+GD6bjnYm2VuPuCXmpuYvmCXQ==",
+      "funding": [
+        {
+          "type": "github",
+          "url": "https://github.com/sponsors/feross"
+        },
+        {
+          "type": "patreon",
+          "url": "https://www.patreon.com/feross"
+        },
+        {
+          "type": "consulting",
+          "url": "https://feross.org/support"
+        }
+      ],
+      "license": "MIT"
+    },
+    "node_modules/safer-buffer": {
+      "version": "2.1.2",
+      "resolved": "https://registry.npmjs.org/safer-buffer/-/safer-buffer-2.1.2.tgz",
+      "integrity": "sha512-YZo3K82SD7Riyi0E1EQPojLz7kpepnSQI9IyPbHHg1XXXevb5dJI7tpyN2ADxGcQbHG7vcyRHk0cbwqcQriUtg==",
+      "license": "MIT"
+    },
+    "node_modules/semver": {
+      "version": "7.7.2",
+      "resolved": "https://registry.npmjs.org/semver/-/semver-7.7.2.tgz",
+      "integrity": "sha512-RF0Fw+rO5AMf9MAyaRXI4AV0Ulj5lMHqVxxdSgiVbixSCXoEmmX/jk0CuJw4+3SqroYO9VoUh+HcuJivvtJemA==",
+      "license": "ISC",
+      "bin": {
+        "semver": "bin/semver.js"
+      },
+      "engines": {
+        "node": ">=10"
+      }
+    },
+    "node_modules/send": {
+      "version": "1.2.0",
+      "resolved": "https://registry.npmjs.org/send/-/send-1.2.0.tgz",
+      "integrity": "sha512-uaW0WwXKpL9blXE2o0bRhoL2EGXIrZxQ2ZQ4mgcfoBxdFmQold+qWsD2jLrfZ0trjKL6vOw0j//eAwcALFjKSw==",
+      "license": "MIT",
+      "dependencies": {
+        "debug": "^4.3.5",
+        "encodeurl": "^2.0.0",
+        "escape-html": "^1.0.3",
+        "etag": "^1.8.1",
+        "fresh": "^2.0.0",
+        "http-errors": "^2.0.0",
+        "mime-types": "^3.0.1",
+        "ms": "^2.1.3",
+        "on-finished": "^2.4.1",
+        "range-parser": "^1.2.1",
+        "statuses": "^2.0.1"
+      },
+      "engines": {
+        "node": ">= 18"
+      }
+    },
+    "node_modules/serve-static": {
+      "version": "2.2.0",
+      "resolved": "https://registry.npmjs.org/serve-static/-/serve-static-2.2.0.tgz",
+      "integrity": "sha512-61g9pCh0Vnh7IutZjtLGGpTA355+OPn2TyDv/6ivP2h/AdAVX9azsoxmg2/M6nZeQZNYBEwIcsne1mJd9oQItQ==",
+      "license": "MIT",
+      "dependencies": {
+        "encodeurl": "^2.0.0",
+        "escape-html": "^1.0.3",
+        "parseurl": "^1.3.3",
+        "send": "^1.2.0"
+      },
+      "engines": {
+        "node": ">= 18"
+      }
+    },
+    "node_modules/setprototypeof": {
+      "version": "1.2.0",
+      "resolved": "https://registry.npmjs.org/setprototypeof/-/setprototypeof-1.2.0.tgz",
+      "integrity": "sha512-E5LDX7Wrp85Kil5bhZv46j8jOeboKq5JMmYM3gVGdGH8xFpPWXUMsNrlODCrkoxMEeNi/XZIwuRvY4XNwYMJpw==",
+      "license": "ISC"
+    },
+    "node_modules/side-channel": {
+      "version": "1.1.0",
+      "resolved": "https://registry.npmjs.org/side-channel/-/side-channel-1.1.0.tgz",
+      "integrity": "sha512-ZX99e6tRweoUXqR+VBrslhda51Nh5MTQwou5tnUDgbtyM0dBgmhEDtWGP/xbKn6hqfPRHujUNwz5fy/wbbhnpw==",
+      "license": "MIT",
+      "dependencies": {
+        "es-errors": "^1.3.0",
+        "object-inspect": "^1.13.3",
+        "side-channel-list": "^1.0.0",
+        "side-channel-map": "^1.0.1",
+        "side-channel-weakmap": "^1.0.2"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/side-channel-list": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/side-channel-list/-/side-channel-list-1.0.0.tgz",
+      "integrity": "sha512-FCLHtRD/gnpCiCHEiJLOwdmFP+wzCmDEkc9y7NsYxeF4u7Btsn1ZuwgwJGxImImHicJArLP4R0yX4c2KCrMrTA==",
+      "license": "MIT",
+      "dependencies": {
+        "es-errors": "^1.3.0",
+        "object-inspect": "^1.13.3"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/side-channel-map": {
+      "version": "1.0.1",
+      "resolved": "https://registry.npmjs.org/side-channel-map/-/side-channel-map-1.0.1.tgz",
+      "integrity": "sha512-VCjCNfgMsby3tTdo02nbjtM/ewra6jPHmpThenkTYh8pG9ucZ/1P8So4u4FGBek/BjpOVsDCMoLA/iuBKIFXRA==",
+      "license": "MIT",
+      "dependencies": {
+        "call-bound": "^1.0.2",
+        "es-errors": "^1.3.0",
+        "get-intrinsic": "^1.2.5",
+        "object-inspect": "^1.13.3"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/side-channel-weakmap": {
+      "version": "1.0.2",
+      "resolved": "https://registry.npmjs.org/side-channel-weakmap/-/side-channel-weakmap-1.0.2.tgz",
+      "integrity": "sha512-WPS/HvHQTYnHisLo9McqBHOJk2FkHO/tlpvldyrnem4aeQp4hai3gythswg6p01oSoTl58rcpiFAjF2br2Ak2A==",
+      "license": "MIT",
+      "dependencies": {
+        "call-bound": "^1.0.2",
+        "es-errors": "^1.3.0",
+        "get-intrinsic": "^1.2.5",
+        "object-inspect": "^1.13.3",
+        "side-channel-map": "^1.0.1"
+      },
+      "engines": {
+        "node": ">= 0.4"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/ljharb"
+      }
+    },
+    "node_modules/simple-update-notifier": {
+      "version": "2.0.0",
+      "resolved": "https://registry.npmjs.org/simple-update-notifier/-/simple-update-notifier-2.0.0.tgz",
+      "integrity": "sha512-a2B9Y0KlNXl9u/vsW6sTIu9vGEpfKu2wRV6l1H3XEas/0gUIzGzBoP/IouTcUQbm9JWZLH3COxyn03TYlFax6w==",
+      "license": "MIT",
+      "dependencies": {
+        "semver": "^7.5.3"
+      },
+      "engines": {
+        "node": ">=10"
+      }
+    },
+    "node_modules/statuses": {
+      "version": "2.0.2",
+      "resolved": "https://registry.npmjs.org/statuses/-/statuses-2.0.2.tgz",
+      "integrity": "sha512-DvEy55V3DB7uknRo+4iOGT5fP1slR8wQohVdknigZPMpMstaKJQWhwiYBACJE3Ul2pTnATihhBYnRhZQHGBiRw==",
+      "license": "MIT",
+      "engines": {
+        "node": ">= 0.8"
+      }
+    },
+    "node_modules/supports-color": {
+      "version": "5.5.0",
+      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-5.5.0.tgz",
+      "integrity": "sha512-QjVjwdXIt408MIiAqCX4oUKsgU2EqAGzs2Ppkm4aQYbjm+ZEWEcW4SfFNTr4uMNZma0ey4f5lgLrkB0aX0QMow==",
+      "license": "MIT",
+      "dependencies": {
+        "has-flag": "^3.0.0"
+      },
+      "engines": {
+        "node": ">=4"
+      }
+    },
+    "node_modules/to-regex-range": {
+      "version": "5.0.1",
+      "resolved": "https://registry.npmjs.org/to-regex-range/-/to-regex-range-5.0.1.tgz",
+      "integrity": "sha512-65P7iz6X5yEr1cwcgvQxbbIw7Uk3gOy5dIdtZ4rDveLqhrdJP+Li/Hx6tyK0NEb+2GCyneCMJiGqrADCSNk8sQ==",
+      "license": "MIT",
+      "dependencies": {
+        "is-number": "^7.0.0"
+      },
+      "engines": {
+        "node": ">=8.0"
+      }
+    },
+    "node_modules/toidentifier": {
+      "version": "1.0.1",
+      "resolved": "https://registry.npmjs.org/toidentifier/-/toidentifier-1.0.1.tgz",
+      "integrity": "sha512-o5sSPKEkg/DIQNmH43V0/uerLrpzVedkUh8tGNvaeXpfpuwjKenlSox/2O/BTlZUtEe+JG7s5YhEz608PlAHRA==",
+      "license": "MIT",
+      "engines": {
+        "node": ">=0.6"
+      }
+    },
+    "node_modules/touch": {
+      "version": "3.1.1",
+      "resolved": "https://registry.npmjs.org/touch/-/touch-3.1.1.tgz",
+      "integrity": "sha512-r0eojU4bI8MnHr8c5bNo7lJDdI2qXlWWJk6a9EAFG7vbhTjElYhBVS3/miuE0uOuoLdb8Mc/rVfsmm6eo5o9GA==",
+      "license": "ISC",
+      "bin": {
+        "nodetouch": "bin/nodetouch.js"
+      }
+    },
+    "node_modules/type-is": {
+      "version": "2.0.1",
+      "resolved": "https://registry.npmjs.org/type-is/-/type-is-2.0.1.tgz",
+      "integrity": "sha512-OZs6gsjF4vMp32qrCbiVSkrFmXtG/AZhY3t0iAMrMBiAZyV9oALtXO8hsrHbMXF9x6L3grlFuwW2oAz7cav+Gw==",
+      "license": "MIT",
+      "dependencies": {
+        "content-type": "^1.0.5",
+        "media-typer": "^1.1.0",
+        "mime-types": "^3.0.0"
+      },
+      "engines": {
+        "node": ">= 0.6"
+      }
+    },
+    "node_modules/undefsafe": {
+      "version": "2.0.5",
+      "resolved": "https://registry.npmjs.org/undefsafe/-/undefsafe-2.0.5.tgz",
+      "integrity": "sha512-WxONCrssBM8TSPRqN5EmsjVrsv4A8X12J4ArBiiayv3DyyG3ZlIg6yysuuSYdZsVz3TKcTg2fd//Ujd4CHV1iA==",
+      "license": "MIT"
+    },
+    "node_modules/unpipe": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/unpipe/-/unpipe-1.0.0.tgz",
+      "integrity": "sha512-pjy2bYhSsufwWlKwPc+l3cN7+wuJlK6uz0YdJEOlQDbl6jo/YlPi4mb8agUkVC8BF7V8NuzeyPNqRksA3hztKQ==",
+      "license": "MIT",
+      "engines": {
+        "node": ">= 0.8"
+      }
+    },
+    "node_modules/utils-merge": {
+      "version": "1.0.1",
+      "resolved": "https://registry.npmjs.org/utils-merge/-/utils-merge-1.0.1.tgz",
+      "integrity": "sha512-pMZTvIkT1d+TFGvDOqodOclx0QWkkgi6Tdoa8gC8ffGAAqz9pzPTZWAybbsHHoED/ztMtkv/VoYTYyShUn81hA==",
+      "license": "MIT",
+      "engines": {
+        "node": ">= 0.4.0"
+      }
+    },
+    "node_modules/vary": {
+      "version": "1.1.2",
+      "resolved": "https://registry.npmjs.org/vary/-/vary-1.1.2.tgz",
+      "integrity": "sha512-BNGbWLfd0eUPabhkXUVm0j8uuvREyTh5ovRa/dyow/BqAbZJyC+5fU+IzQOzmAKzYqYRAISoRhdQr3eIZ/PXqg==",
+      "license": "MIT",
+      "engines": {
+        "node": ">= 0.8"
+      }
+    },
+    "node_modules/wrappy": {
+      "version": "1.0.2",
+      "resolved": "https://registry.npmjs.org/wrappy/-/wrappy-1.0.2.tgz",
+      "integrity": "sha512-l4Sp/DRseor9wL6EvV2+TuQn63dMkPjZ/sp9XkghTEbV9KlPS1xUsZ3u7/IQO4wxtcFB4bgpQPRcR3QCvezPcQ==",
+      "license": "ISC"
+    }
+  }
+}
diff --git a/package.json b/package.json
new file mode 100644
index 0000000..9c237e6
--- /dev/null
+++ b/package.json
@@ -0,0 +1,26 @@
+{
+  "name": "server",
+  "version": "1.0.0",
+  "description": "",
+  "main": "app.js",
+  "scripts": {
+    "server": "nodemon app.js"
+  },
+  "keywords": [
+    "node",
+    "express",
+    "mongodb"
+  ],
+  "author": "Behzod Salamov",
+  "license": "ISC",
+  "type": "commonjs",
+  "dependencies": {
+    "cookie-parser": "^1.4.7",
+    "cors": "^2.8.5",
+    "dotenv": "^17.2.1",
+    "express": "^5.1.0",
+    "express-group-routes": "^1.1.0",
+    "http": "^0.0.1-security",
+    "nodemon": "^3.1.10"
+  }
+}
diff --git a/routes/index.js b/routes/index.js
new file mode 100644
index 0000000..c5a3242
--- /dev/null
+++ b/routes/index.js
@@ -0,0 +1,14 @@
+const authController = require("../controllers/auth.controller");
+
+const router = require("express").Router();
+
+// Auth routes
+router.post("/auth/login", authController.login);
+router.post("/auth/verify", authController.verify);
+
+// User routes
+router.get("/user/contacts", (req, res) => {
+  res.json({ contacts: [] });
+});
+
+module.exports = router;
-- 
2.41.0


From 3b7a9029d64a365076a809eebb0ad0b6534a909c Mon Sep 17 00:00:00 2001
From: oscar-bek <salamov.behzod@gmail.com>
Date: Mon, 4 Aug 2025 16:03:14 +0900
Subject: [PATCH 2/8] feat(server): Database, error middleware & SMTP

---
 app.js                          | 20 +++++++++++++++-----
 controllers/auth.controller.js  | 32 +++++++++++++++++++++++---------
 errors/base.error.js            | 14 ++++++++++++++
 middlewares/error.middleware.js |  9 +++++++++
 models/user.model.js            | 15 +++++++++++++++
 package.json                    |  7 ++++++-
 service/mail.service.js         | 31 +++++++++++++++++++++++++++++++
 7 files changed, 113 insertions(+), 15 deletions(-)
 create mode 100644 errors/base.error.js
 create mode 100644 middlewares/error.middleware.js
 create mode 100644 models/user.model.js
 create mode 100644 service/mail.service.js

diff --git a/app.js b/app.js
index 96bc30e..16f8402 100644
--- a/app.js
+++ b/app.js
@@ -3,7 +3,8 @@ require("dotenv").config();
 const express = require("express");
 const cookieParser = require("cookie-parser");
 const cors = require("cors");
-
+const { default: mongoose } = require('mongoose')
+const errorMiddleware = require('./middlewares/error.middleware')
 const app = express();
 
 // Middleware
@@ -30,8 +31,17 @@ app.get("/", (req, res) => {
 
 app.use("/api", require("./routes/index"));
 
-const PORT = process.env.PORT || 6000;
 
-app.listen(PORT, () =>
-  console.log(`Server is running on port http://localhost:${PORT}`)
-);
+app.use(errorMiddleware)
+
+const bootstrap = async () => {
+	try {
+		const PORT = process.env.PORT || 6000
+		mongoose.connect(process.env.MONGO_URI).then(() => console.log('MongoDB connected'))
+		app.listen(PORT, () => console.log(`Server is running on port ${PORT}`))
+	} catch (error) {
+		console.error(error)
+	}
+}
+
+bootstrap()
diff --git a/controllers/auth.controller.js b/controllers/auth.controller.js
index 2794f14..b5f8615 100644
--- a/controllers/auth.controller.js
+++ b/controllers/auth.controller.js
@@ -1,13 +1,27 @@
+const BaseError = require("../errors/base.error");
+const userModel = require("../models/user.model");
+const mailService = require('../service/mail.service') 
+
 class AuthController {
-	async login(req, res, next) {
-		const { email } = req.body
-		res.json({ email })
-	}
-	async verify(req, res, next) {
+  async login(req, res, next) {
+    try {
+			const { email } = req.body
+			await mailService.sendOtp(email)
+			// const existUser = await userModel.findOne({ email })
+			// if (existUser) {
+			// 	throw BaseError.BadRequest('User already exist', [{ email: 'User already exist' }])
+			// }
+			// const createdUser = await userModel.create({ email })
+			res.status(201).json({ email })
+		} catch (error) {
+			next(error)
+		}
+  }
+  async verify(req, res, next) {
     console.log("Verify called with body:", req.body);
-		const { email, otp } = req.body
-		res.json({ email, otp })
-	}
+    const { email, otp } = req.body;
+    res.json({ email, otp });
+  }
 }
 
-module.exports = new AuthController()
\ No newline at end of file
+module.exports = new AuthController();
diff --git a/errors/base.error.js b/errors/base.error.js
new file mode 100644
index 0000000..b10dc66
--- /dev/null
+++ b/errors/base.error.js
@@ -0,0 +1,14 @@
+module.exports = class BaseError extends Error {
+	status
+	errors
+
+	constructor(status, message, errors = []) {
+		super(message)
+		this.status = status
+		this.errors = errors
+	}
+
+	static BadRequest(message, errors = []) {
+		return new BaseError(400, message, errors)
+	}
+}
\ No newline at end of file
diff --git a/middlewares/error.middleware.js b/middlewares/error.middleware.js
new file mode 100644
index 0000000..af015fa
--- /dev/null
+++ b/middlewares/error.middleware.js
@@ -0,0 +1,9 @@
+const BaseError = require('../errors/base.error')
+
+module.exports = function (err, req, res, next) {
+	if (err instanceof BaseError) {
+		return res.status(err.status).json({ message: err.message, errors: err.errors })
+	}
+
+	return res.status(500).json({ message: err.message })
+}
\ No newline at end of file
diff --git a/models/user.model.js b/models/user.model.js
new file mode 100644
index 0000000..3ee8d3e
--- /dev/null
+++ b/models/user.model.js
@@ -0,0 +1,15 @@
+const { Schema, model } = require('mongoose')
+
+const userSchema = new Schema({
+	email: { type: String, required: true, unique: true },
+	isVerified: { type: Boolean, default: false },
+	firstName: { type: String },
+	lastName: { type: String },
+	bio: { type: String },
+	avatar: { type: String },
+	muted: { type: Boolean, default: false },
+	notificationSound: { type: String, default: 'notification.mp3' },
+	sendingSound: { type: String, default: 'sending.mp3' },
+})
+
+module.exports = model('User', userSchema)
\ No newline at end of file
diff --git a/package.json b/package.json
index 9c237e6..ccf344b 100644
--- a/package.json
+++ b/package.json
@@ -15,12 +15,17 @@
   "license": "ISC",
   "type": "commonjs",
   "dependencies": {
+    "@radix-ui/react-accordion": "^1.2.11",
+    "@radix-ui/react-switch": "^1.2.5",
     "cookie-parser": "^1.4.7",
     "cors": "^2.8.5",
     "dotenv": "^17.2.1",
     "express": "^5.1.0",
     "express-group-routes": "^1.1.0",
     "http": "^0.0.1-security",
-    "nodemon": "^3.1.10"
+    "mongoose": "^8.17.0",
+    "nodemailer": "^6.10.1",
+    "nodemon": "^3.1.10",
+    "use-sound": "^5.0.0"
   }
 }
diff --git a/service/mail.service.js b/service/mail.service.js
new file mode 100644
index 0000000..de8078b
--- /dev/null
+++ b/service/mail.service.js
@@ -0,0 +1,31 @@
+const nodemailer = require('nodemailer')
+
+class MailService {
+	constructor() {
+		this.transporter = nodemailer.createTransport({
+			host: process.env.SMTP_HOST,
+			port: process.env.SMTP_PORT,
+			secure: false,
+			auth: {
+				user: process.env.SMTP_USER,
+				pass: process.env.SMTP_PASS,
+			},
+		})
+	}
+
+	async sendOtp(to) {
+		const otp = Math.floor(100000 + Math.random() * 900000) // 6 digit otp
+		console.log(otp)
+
+		await this.transporter.sendMail({
+			from: process.env.SMTP_USER,
+			to,
+			subject: `OTP for verification ${new Date().toLocaleString()}`,
+			html: `<h1>Your OTP is ${otp}</h1>`,
+		})
+	}
+
+	async verifyOtp(to, subject, text) {}
+}
+
+module.exports = new MailService()
\ No newline at end of file
-- 
2.41.0


From 1ce02165fc2df06d361853c4ab916975091710d7 Mon Sep 17 00:00:00 2001
From: oscar-bek <salamov.behzod@gmail.com>
Date: Tue, 5 Aug 2025 12:04:56 +0900
Subject: [PATCH 3/8] feat(server): develop Message model

---
 controllers/auth.controller.js | 45 ++++++++++++++-------
 controllers/user.controller.js | 44 +++++++++++++++++++++
 lib/constants.js               |  7 ++++
 models/message.model.js        | 16 ++++++++
 models/otp.model.js            |  9 +++++
 models/user.model.js           | 25 ++++++------
 package.json                   |  1 +
 routes/index.js                |  8 ++--
 service/mail.service.js        | 72 ++++++++++++++++++++++------------
 9 files changed, 173 insertions(+), 54 deletions(-)
 create mode 100644 controllers/user.controller.js
 create mode 100644 lib/constants.js
 create mode 100644 models/message.model.js
 create mode 100644 models/otp.model.js

diff --git a/controllers/auth.controller.js b/controllers/auth.controller.js
index b5f8615..a580d01 100644
--- a/controllers/auth.controller.js
+++ b/controllers/auth.controller.js
@@ -1,26 +1,41 @@
 const BaseError = require("../errors/base.error");
 const userModel = require("../models/user.model");
-const mailService = require('../service/mail.service') 
+const mailService = require("../service/mail.service");
 
 class AuthController {
   async login(req, res, next) {
     try {
-			const { email } = req.body
-			await mailService.sendOtp(email)
-			// const existUser = await userModel.findOne({ email })
-			// if (existUser) {
-			// 	throw BaseError.BadRequest('User already exist', [{ email: 'User already exist' }])
-			// }
-			// const createdUser = await userModel.create({ email })
-			res.status(201).json({ email })
-		} catch (error) {
-			next(error)
-		}
+      const { email } = req.body;
+      await mailService.sendOtp(email);
+      // const existUser = await userModel.findOne({ email })
+      // if (existUser) {
+      // 	throw BaseError.BadRequest('User already exist', [{ email: 'User already exist' }])
+      // }
+      // const createdUser = await userModel.create({ email })
+      res.status(201).json({ email });
+      const existUser = await userModel.findOne({ email });
+      if (existUser) {
+        await mailService.sendOtp(existUser.email);
+        return res.status(200).json({ message: "existing_user" });
+      }
+      const newUser = await userModel.create({ email });
+      await mailService.sendOtp(newUser.email);
+      res.status(200).json({ message: "new_user" });
+    } catch (error) {
+      next(error);
+    }
   }
   async verify(req, res, next) {
-    console.log("Verify called with body:", req.body);
-    const { email, otp } = req.body;
-    res.json({ email, otp });
+    try {
+      const { email, otp } = req.body;
+      const result = await mailService.verifyOtp(email, otp);
+      if (result) {
+        await userModel.findOneAndUpdate({ email }, { isVerified: true });
+        res.status(200).json({ message: "verified" });
+      }
+    } catch (error) {
+      next(error);
+    }
   }
 }
 
diff --git a/controllers/user.controller.js b/controllers/user.controller.js
new file mode 100644
index 0000000..643c2c8
--- /dev/null
+++ b/controllers/user.controller.js
@@ -0,0 +1,44 @@
+const { CONST } = require('../lib/constants')
+const messageModel = require('../models/message.model')
+
+class UserController {
+	// [GET]
+	async getMessages(req, res, next) {
+		try {
+			const user = '672eff8a01fdd82ec1969f97'
+			const { contactId } = req.params
+
+			const messages = await messageModel
+				.find({
+					$or: [
+						{ sender: user, receiver: contactId },
+						{ sender: contactId, receiver: user },
+					],
+				})
+				.populate({ path: 'sender', select: 'email' })
+				.populate({ path: 'receiver', select: 'email' })
+
+			await messageModel.updateMany({ sender: contactId, receiver: user, status: 'SENT' }, { status: CONST.READ })
+
+			res.status(200).json({ messages })
+		} catch (error) {
+			next(error)
+		}
+	}
+
+	// [POST]
+	async createMessage(req, res, next) {
+		try {
+			const newMessage = await messageModel.create(req.body)
+			const currentMessage = await messageModel
+				.findById(newMessage._id)
+				.populate({ path: 'sender', select: 'email' })
+				.populate({ path: 'receiver', select: 'email' })
+			res.status(201).json({ newMessage: currentMessage })
+		} catch (error) {
+			next(error)
+		}
+	}
+}
+
+module.exports = new UserController()
\ No newline at end of file
diff --git a/lib/constants.js b/lib/constants.js
new file mode 100644
index 0000000..0acc339
--- /dev/null
+++ b/lib/constants.js
@@ -0,0 +1,7 @@
+const CONST = {
+	READ: 'read',
+	DELIVERED: 'delivered',
+	SENT: 'sent',
+}
+
+module.exports = { CONST }
\ No newline at end of file
diff --git a/models/message.model.js b/models/message.model.js
new file mode 100644
index 0000000..c8a890e
--- /dev/null
+++ b/models/message.model.js
@@ -0,0 +1,16 @@
+const { Schema, model } = require('mongoose')
+const { CONST } = require('../lib/constants')
+
+const messageSchema = new Schema(
+	{
+		sender: { type: Schema.Types.ObjectId, ref: 'User', required: true },
+		receiver: { type: Schema.Types.ObjectId, ref: 'User', required: true },
+		text: { type: String },
+		media: { type: String },
+		status: { type: String, enum: [CONST.DELIVERED, CONST.READ, CONST.SENT], default: CONST.SENT },
+		reaction: { type: String },
+	},
+	{ timestamps: true }
+)
+
+module.exports = model('Message', messageSchema)
\ No newline at end of file
diff --git a/models/otp.model.js b/models/otp.model.js
new file mode 100644
index 0000000..8e04de4
--- /dev/null
+++ b/models/otp.model.js
@@ -0,0 +1,9 @@
+const { Schema, model } = require('mongoose')
+
+const otpSchema = new Schema({
+	email: { type: String, required: true },
+	otp: { type: String, required: true },
+	expireAt: { type: Date },
+})
+
+module.exports = model('Otp', otpSchema)
\ No newline at end of file
diff --git a/models/user.model.js b/models/user.model.js
index 3ee8d3e..a621cfa 100644
--- a/models/user.model.js
+++ b/models/user.model.js
@@ -1,15 +1,18 @@
 const { Schema, model } = require('mongoose')
 
-const userSchema = new Schema({
-	email: { type: String, required: true, unique: true },
-	isVerified: { type: Boolean, default: false },
-	firstName: { type: String },
-	lastName: { type: String },
-	bio: { type: String },
-	avatar: { type: String },
-	muted: { type: Boolean, default: false },
-	notificationSound: { type: String, default: 'notification.mp3' },
-	sendingSound: { type: String, default: 'sending.mp3' },
-})
+const userSchema = new Schema(
+	{
+		email: { type: String, required: true, unique: true },
+		isVerified: { type: Boolean, default: false },
+		firstName: { type: String },
+		lastName: { type: String },
+		bio: { type: String },
+		avatar: { type: String },
+		muted: { type: Boolean, default: false },
+		notificationSound: { type: String, default: 'notification.mp3' },
+		sendingSound: { type: String, default: 'sending.mp3' },
+	},
+	{ timestamps: true }
+)
 
 module.exports = model('User', userSchema)
\ No newline at end of file
diff --git a/package.json b/package.json
index ccf344b..e9a0f44 100644
--- a/package.json
+++ b/package.json
@@ -17,6 +17,7 @@
   "dependencies": {
     "@radix-ui/react-accordion": "^1.2.11",
     "@radix-ui/react-switch": "^1.2.5",
+    "bcrypt": "^6.0.0",
     "cookie-parser": "^1.4.7",
     "cors": "^2.8.5",
     "dotenv": "^17.2.1",
diff --git a/routes/index.js b/routes/index.js
index c5a3242..4e9e7bd 100644
--- a/routes/index.js
+++ b/routes/index.js
@@ -1,4 +1,5 @@
 const authController = require("../controllers/auth.controller");
+const userController = require("../controllers/user.controller");
 
 const router = require("express").Router();
 
@@ -6,9 +7,8 @@ const router = require("express").Router();
 router.post("/auth/login", authController.login);
 router.post("/auth/verify", authController.verify);
 
-// User routes
-router.get("/user/contacts", (req, res) => {
-  res.json({ contacts: [] });
-});
+router.get("/user/messages/:contactId", userController.getMessages);
+
+router.post("/user/create-message", userController.createMessage);
 
 module.exports = router;
diff --git a/service/mail.service.js b/service/mail.service.js
index de8078b..14aa73d 100644
--- a/service/mail.service.js
+++ b/service/mail.service.js
@@ -1,31 +1,55 @@
-const nodemailer = require('nodemailer')
+const nodemailer = require("nodemailer");
+const bcrypt = require("bcrypt");
+const otpModel = require("../models/otp.model");
+const BaseError = require("../errors/base.error");
 
 class MailService {
-	constructor() {
-		this.transporter = nodemailer.createTransport({
-			host: process.env.SMTP_HOST,
-			port: process.env.SMTP_PORT,
-			secure: false,
-			auth: {
-				user: process.env.SMTP_USER,
-				pass: process.env.SMTP_PASS,
-			},
-		})
-	}
+  constructor() {
+    this.transporter = nodemailer.createTransport({
+      host: process.env.SMTP_HOST,
+      port: process.env.SMTP_PORT,
+      secure: false,
+      auth: {
+        user: process.env.SMTP_USER,
+        pass: process.env.SMTP_PASS,
+      },
+    });
+  }
 
-	async sendOtp(to) {
-		const otp = Math.floor(100000 + Math.random() * 900000) // 6 digit otp
-		console.log(otp)
+  async sendOtp(to) {
+    const otp = Math.floor(100000 + Math.random() * 900000); // 6 digit otp
+    console.log(otp);
+    const hashedOtp = await bcrypt.hash(otp.toString(), 10);
+    await otpModel.create({
+      email: to,
+      otp: hashedOtp,
+      expireAt: new Date(Date.now() + 5 * 60 * 1000),
+    });
 
-		await this.transporter.sendMail({
-			from: process.env.SMTP_USER,
-			to,
-			subject: `OTP for verification ${new Date().toLocaleString()}`,
-			html: `<h1>Your OTP is ${otp}</h1>`,
-		})
-	}
+    await this.transporter.sendMail({
+      from: process.env.SMTP_USER,
+      to,
+      subject: `OTP for verification ${new Date().toLocaleString()}`,
+      html: `<h1>Your OTP is ${otp}</h1>`,
+    });
+  }
+
+async verifyOtp(email, otp) {
+		const otpData = await otpModel.find({ email })
+		if (!otpData) throw BaseError.BadRequest('Otp not found')
+		const currentOtp = otpData[otpData.length - 1]
+		if (!currentOtp) throw BaseError.BadRequest('Otp not found')
 
-	async verifyOtp(to, subject, text) {}
+		if (currentOtp.expireAt < new Date()) {
+			throw BaseError.BadRequest('Your otp is expired')
+		}
+
+		const isValid = await bcrypt.compare(otp.toString(), currentOtp.otp)
+		if (!isValid) throw BaseError.BadRequest('Invalid otp entered')
+
+		await otpModel.deleteMany({ email })
+		return true
+	}
 }
 
-module.exports = new MailService()
\ No newline at end of file
+module.exports = new MailService();
-- 
2.41.0


From 29ff6c9749582c1e0f66deb5c5dbcf0c7eead15a Mon Sep 17 00:00:00 2001
From: oscar-bek <salamov.behzod@gmail.com>
Date: Tue, 5 Aug 2025 12:52:12 +0900
Subject: [PATCH 4/8] feat(server): develop Message model

---
 controllers/auth.controller.js | 69 +++++++++++++++-------------------
 controllers/user.controller.js |  2 +-
 service/mail.service.js        | 68 ++++++++++++++++-----------------
 3 files changed, 64 insertions(+), 75 deletions(-)

diff --git a/controllers/auth.controller.js b/controllers/auth.controller.js
index a580d01..e9494e7 100644
--- a/controllers/auth.controller.js
+++ b/controllers/auth.controller.js
@@ -1,42 +1,35 @@
-const BaseError = require("../errors/base.error");
-const userModel = require("../models/user.model");
-const mailService = require("../service/mail.service");
+const BaseError = require('../errors/base.error')
+const userModel = require('../models/user.model')
+const mailService = require('../service/mail.service')
 
 class AuthController {
-  async login(req, res, next) {
-    try {
-      const { email } = req.body;
-      await mailService.sendOtp(email);
-      // const existUser = await userModel.findOne({ email })
-      // if (existUser) {
-      // 	throw BaseError.BadRequest('User already exist', [{ email: 'User already exist' }])
-      // }
-      // const createdUser = await userModel.create({ email })
-      res.status(201).json({ email });
-      const existUser = await userModel.findOne({ email });
-      if (existUser) {
-        await mailService.sendOtp(existUser.email);
-        return res.status(200).json({ message: "existing_user" });
-      }
-      const newUser = await userModel.create({ email });
-      await mailService.sendOtp(newUser.email);
-      res.status(200).json({ message: "new_user" });
-    } catch (error) {
-      next(error);
-    }
-  }
-  async verify(req, res, next) {
-    try {
-      const { email, otp } = req.body;
-      const result = await mailService.verifyOtp(email, otp);
-      if (result) {
-        await userModel.findOneAndUpdate({ email }, { isVerified: true });
-        res.status(200).json({ message: "verified" });
-      }
-    } catch (error) {
-      next(error);
-    }
-  }
+	async login(req, res, next) {
+		try {
+			const { email } = req.body
+			const existUser = await userModel.findOne({ email })
+			if (existUser) {
+				await mailService.sendOtp(existUser.email)
+				return res.status(200).json({ message: 'existing_user' })
+			}
+			const newUser = await userModel.create({ email })
+			await mailService.sendOtp(newUser.email)
+			res.status(200).json({ message: 'new_user' })
+		} catch (error) {
+			next(error)
+		}
+	}
+	async verify(req, res, next) {
+		try {
+			const { email, otp } = req.body
+			const result = await mailService.verifyOtp(email, otp)
+			if (result) {
+				await userModel.findOneAndUpdate({ email }, { isVerified: true })
+				res.status(200).json({ message: 'verified' })
+			}
+		} catch (error) {
+			next(error)
+		}
+	}
 }
 
-module.exports = new AuthController();
+module.exports = new AuthController()
\ No newline at end of file
diff --git a/controllers/user.controller.js b/controllers/user.controller.js
index 643c2c8..1bcb1dc 100644
--- a/controllers/user.controller.js
+++ b/controllers/user.controller.js
@@ -5,7 +5,7 @@ class UserController {
 	// [GET]
 	async getMessages(req, res, next) {
 		try {
-			const user = '672eff8a01fdd82ec1969f97'
+			const user = '689176f4b94f39c4700e27d6'
 			const { contactId } = req.params
 
 			const messages = await messageModel
diff --git a/service/mail.service.js b/service/mail.service.js
index 14aa73d..38afe59 100644
--- a/service/mail.service.js
+++ b/service/mail.service.js
@@ -1,40 +1,36 @@
-const nodemailer = require("nodemailer");
-const bcrypt = require("bcrypt");
-const otpModel = require("../models/otp.model");
-const BaseError = require("../errors/base.error");
+const nodemailer = require('nodemailer')
+const bcrypt = require('bcrypt')
+const otpModel = require('../models/otp.model')
+const BaseError = require('../errors/base.error')
 
 class MailService {
-  constructor() {
-    this.transporter = nodemailer.createTransport({
-      host: process.env.SMTP_HOST,
-      port: process.env.SMTP_PORT,
-      secure: false,
-      auth: {
-        user: process.env.SMTP_USER,
-        pass: process.env.SMTP_PASS,
-      },
-    });
-  }
-
-  async sendOtp(to) {
-    const otp = Math.floor(100000 + Math.random() * 900000); // 6 digit otp
-    console.log(otp);
-    const hashedOtp = await bcrypt.hash(otp.toString(), 10);
-    await otpModel.create({
-      email: to,
-      otp: hashedOtp,
-      expireAt: new Date(Date.now() + 5 * 60 * 1000),
-    });
-
-    await this.transporter.sendMail({
-      from: process.env.SMTP_USER,
-      to,
-      subject: `OTP for verification ${new Date().toLocaleString()}`,
-      html: `<h1>Your OTP is ${otp}</h1>`,
-    });
-  }
-
-async verifyOtp(email, otp) {
+	constructor() {
+		this.transporter = nodemailer.createTransport({
+			host: process.env.SMTP_HOST,
+			port: process.env.SMTP_PORT,
+			secure: false,
+			auth: {
+				user: process.env.SMTP_USER,
+				pass: process.env.SMTP_PASS,
+			},
+		})
+	}
+
+	async sendOtp(to) {
+		const otp = Math.floor(100000 + Math.random() * 900000) // 6 digit otp
+		console.log(otp)
+
+		const hashedOtp = await bcrypt.hash(otp.toString(), 10)
+		await otpModel.create({ email: to, otp: hashedOtp, expireAt: new Date(Date.now() + 5 * 60 * 1000) })
+		await this.transporter.sendMail({
+			from: process.env.SMTP_USER,
+			to,
+			subject: `OTP for verification ${new Date().toLocaleString()}`,
+			html: `<h1>Your OTP is ${otp}</h1>`,
+		})
+	}
+
+	async verifyOtp(email, otp) {
 		const otpData = await otpModel.find({ email })
 		if (!otpData) throw BaseError.BadRequest('Otp not found')
 		const currentOtp = otpData[otpData.length - 1]
@@ -52,4 +48,4 @@ async verifyOtp(email, otp) {
 	}
 }
 
-module.exports = new MailService();
+module.exports = new MailService()
\ No newline at end of file
-- 
2.41.0


From 9a73eb1c82b78632837088eedf31bff0df105e89 Mon Sep 17 00:00:00 2001
From: oscar-bek <salamov.behzod@gmail.com>
Date: Tue, 5 Aug 2025 15:49:36 +0900
Subject: [PATCH 5/8] feat(serve): develop User Api routes

---
 app.js                         |  36 ++---
 controllers/user.controller.js | 256 +++++++++++++++++++++++++++------
 models/user.model.js           |  31 ++--
 routes/index.js                |  13 +-
 4 files changed, 252 insertions(+), 84 deletions(-)

diff --git a/app.js b/app.js
index 16f8402..7457a4f 100644
--- a/app.js
+++ b/app.js
@@ -1,36 +1,16 @@
-require("dotenv").config();
+require('dotenv').config()
 
-const express = require("express");
-const cookieParser = require("cookie-parser");
-const cors = require("cors");
+const express = require('express')
+const cookieParser = require('cookie-parser')
 const { default: mongoose } = require('mongoose')
 const errorMiddleware = require('./middlewares/error.middleware')
-const app = express();
 
-// Middleware
-app.use(express.json());
-app.use(cookieParser());
-app.use(
-  cors({
-    origin: "http://localhost:3000", // Frontend URL
-    credentials: true,
-  })
-);
-
-// Root route
-app.get("/", (req, res) => {
-  res.json({
-    message: "Telegram Clone Server is running!",
-    status: "OK",
-    endpoints: {
-      auth: "/api/auth/login, /api/auth/verify",
-      user: "/api/user/contacts",
-    },
-  });
-});
+const app = express()
 
-app.use("/api", require("./routes/index"));
+// Middleware
+app.use(express.json())
 
+app.use('/api', require('./routes/index'))
 
 app.use(errorMiddleware)
 
@@ -44,4 +24,4 @@ const bootstrap = async () => {
 	}
 }
 
-bootstrap()
+bootstrap()
\ No newline at end of file
diff --git a/controllers/user.controller.js b/controllers/user.controller.js
index 1bcb1dc..ef3397d 100644
--- a/controllers/user.controller.js
+++ b/controllers/user.controller.js
@@ -1,44 +1,220 @@
-const { CONST } = require('../lib/constants')
-const messageModel = require('../models/message.model')
+const BaseError = require("../errors/base.error");
+const { CONST } = require("../lib/constants");
+const messageModel = require("../models/message.model");
+const userModel = require("../models/user.model");
+const mailService = require("../service/mail.service");
 
 class UserController {
-	// [GET]
-	async getMessages(req, res, next) {
-		try {
-			const user = '689176f4b94f39c4700e27d6'
-			const { contactId } = req.params
-
-			const messages = await messageModel
-				.find({
-					$or: [
-						{ sender: user, receiver: contactId },
-						{ sender: contactId, receiver: user },
-					],
-				})
-				.populate({ path: 'sender', select: 'email' })
-				.populate({ path: 'receiver', select: 'email' })
-
-			await messageModel.updateMany({ sender: contactId, receiver: user, status: 'SENT' }, { status: CONST.READ })
-
-			res.status(200).json({ messages })
-		} catch (error) {
-			next(error)
-		}
-	}
-
-	// [POST]
-	async createMessage(req, res, next) {
-		try {
-			const newMessage = await messageModel.create(req.body)
-			const currentMessage = await messageModel
-				.findById(newMessage._id)
-				.populate({ path: 'sender', select: 'email' })
-				.populate({ path: 'receiver', select: 'email' })
-			res.status(201).json({ newMessage: currentMessage })
-		} catch (error) {
-			next(error)
-		}
-	}
+  // [GET]
+  async getContacts(req, res, next) {
+    try {
+      const userId = "689065fe7766858e3b34a09e";
+
+      const contacts = await userModel.findById(userId).populate("contacts");
+      const allContacts = contacts.contacts.map((contact) =>
+        contact.toObject()
+      );
+
+      for (const contact of allContacts) {
+        const lastMessage = await messageModel
+          .findOne({
+            $or: [
+              { sender: userId, receiver: contact._id },
+              { sender: contact._id, receiver: userId },
+            ],
+          })
+          .populate({ path: "sender" })
+          .populate({ path: "receiver" })
+          .sort({ createdAt: -1 });
+
+        contact.lastMessage = lastMessage;
+      }
+
+      return res.status(200).json({ contacts: allContacts });
+    } catch (error) {
+      next(error);
+    }
+  }
+  async getMessages(req, res, next) {
+    try {
+      const user = "689065fe7766858e3b34a09e";
+      const { contactId } = req.params;
+
+      const messages = await messageModel
+        .find({
+          $or: [
+            { sender: user, receiver: contactId },
+            { sender: contactId, receiver: user },
+          ],
+        })
+        .populate({ path: "sender", select: "email" })
+        .populate({ path: "receiver", select: "email" });
+
+      await messageModel.updateMany(
+        { sender: contactId, receiver: user, status: "SENT" },
+        { status: CONST.READ }
+      );
+
+      res.status(200).json({ messages });
+    } catch (error) {
+      next(error);
+    }
+  }
+
+  // [POST]
+  async createMessage(req, res, next) {
+    try {
+      const newMessage = await messageModel.create(req.body);
+      const currentMessage = await messageModel
+        .findById(newMessage._id)
+        .populate({ path: "sender", select: "email" })
+        .populate({ path: "receiver", select: "email" });
+      res.status(201).json({ newMessage: currentMessage });
+    } catch (error) {
+      next(error);
+    }
+  }
+  async messageRead(req, res, next) {
+    try {
+      const { messages } = req.body;
+      const allMessages = [];
+
+      for (const message of messages) {
+        const updatedMessage = await messageModel.findByIdAndUpdate(
+          message._id,
+          { status: CONST.READ },
+          { new: true }
+        );
+        allMessages.push(updatedMessage);
+      }
+
+      res.status(200).json({ messages: allMessages });
+    } catch (error) {
+      next(error);
+    }
+  }
+  async createContact(req, res, next) {
+    try {
+      const { email } = req.body;
+      const userId = "689065fe7766858e3b34a09e";
+      const user = await userModel.findById(userId);
+      const contact = await userModel.findOne({ email });
+      if (!contact)
+        throw BaseError.BadRequest("User with this email does not exist");
+
+      if (user.email === contact.email)
+        throw BaseError.BadRequest("You cannot add yourself as a contact");
+
+      const existingContact = await userModel.findOne({
+        _id: userId,
+        contacts: contact._id,
+      });
+      if (existingContact) throw BaseError.BadRequest("Contact already exists");
+
+      await userModel.findByIdAndUpdate(userId, {
+        $push: { contacts: contact._id },
+      });
+      const addedContact = await userModel.findByIdAndUpdate(
+        contact._id,
+        { $push: { contacts: userId } },
+        { new: true }
+      );
+      return res
+        .status(201)
+        .json({ message: "Contact added successfully", contact: addedContact });
+    } catch (error) {
+      next(error);
+    }
+  }
+  async createReaction(req, res, next) {
+    try {
+      const { messageId, reaction } = req.body;
+      const updatedMessage = await messageModel.findByIdAndUpdate(
+        messageId,
+        { reaction },
+        { new: true }
+      );
+      res.status(201).json({ updatedMessage });
+    } catch (error) {
+      next(error);
+    }
+  }
+  async sendOtp(req, res, next) {
+    try {
+      const { email } = req.body;
+      const existingUser = await userModel.findOne({ email });
+      if (existingUser)
+        throw BaseError.BadRequest("User with this email already exists");
+      await mailService.sendOtp(email);
+      res.status(200).json({ message: "OTP sent successfully" });
+    } catch (error) {
+      next(error);
+    }
+  }
+
+  // [PUT]
+  async updateProfile(req, res, next) {
+    try {
+      const { userId, ...payload } = req.body;
+      await userModel.findByIdAndUpdate(userId, payload);
+      res.status(200).json({ message: "Profile updated successfully" });
+    } catch (error) {
+      next(error);
+    }
+  }
+  async updateMessage(req, res, next) {
+    try {
+      const { messageId } = req.params;
+      const { text } = req.body;
+      const updatedMessage = await messageModel.findByIdAndUpdate(
+        messageId,
+        { text },
+        { new: true }
+      );
+      res.status(200).json({ updatedMessage });
+    } catch (error) {
+      next(error);
+    }
+  }
+  async updateEmail(req, res, next) {
+    try {
+      const { email, otp } = req.body;
+      const result = await mailService.verifyOtp(email, otp);
+      if (result) {
+        const userId = "672eff8a01fdd82ec1969f97";
+        const user = await userModel.findByIdAndUpdate(
+          userId,
+          { email },
+          { new: true }
+        );
+        res.status(200).json({ user });
+      }
+    } catch (error) {
+      next(error);
+    }
+  }
+
+  // [DELETE]
+  async deleteUser(req, res, next) {
+    try {
+      const userId = "672eff8a01fdd82ec1969f97";
+      await userModel.findByIdAndDelete(userId);
+      res.status(200).json({ message: "User deleted successfully" });
+    } catch (error) {
+      next(error);
+    }
+  }
+  async deleteMessage(req, res, next) {
+    try {
+      const { messageId } = req.params;
+      await messageModel.findByIdAndDelete(messageId);
+      res.status(200).json({ message: "Message deleted successfully" });
+    } catch (error) {
+      next(error);
+    }
+  }
 }
 
-module.exports = new UserController()
\ No newline at end of file
+module.exports = new UserController();
+
+// a b odamni kontaktiga qo'shvotti
diff --git a/models/user.model.js b/models/user.model.js
index a621cfa..1206a12 100644
--- a/models/user.model.js
+++ b/models/user.model.js
@@ -1,18 +1,19 @@
-const { Schema, model } = require('mongoose')
+const { Schema, model } = require("mongoose");
 
 const userSchema = new Schema(
-	{
-		email: { type: String, required: true, unique: true },
-		isVerified: { type: Boolean, default: false },
-		firstName: { type: String },
-		lastName: { type: String },
-		bio: { type: String },
-		avatar: { type: String },
-		muted: { type: Boolean, default: false },
-		notificationSound: { type: String, default: 'notification.mp3' },
-		sendingSound: { type: String, default: 'sending.mp3' },
-	},
-	{ timestamps: true }
-)
+  {
+    email: { type: String, required: true, unique: true },
+    isVerified: { type: Boolean, default: false },
+    firstName: { type: String },
+    lastName: { type: String },
+    bio: { type: String },
+    avatar: { type: String },
+    muted: { type: Boolean, default: false },
+    notificationSound: { type: String, default: "notification.mp3" },
+    sendingSound: { type: String, default: "sending.mp3" },
+    contacts: [{ type: Schema.Types.ObjectId, ref: "User" }],
+  },
+  { timestamps: true }
+);
 
-module.exports = model('User', userSchema)
\ No newline at end of file
+module.exports = model("User", userSchema);
diff --git a/routes/index.js b/routes/index.js
index 4e9e7bd..5db9a62 100644
--- a/routes/index.js
+++ b/routes/index.js
@@ -6,9 +6,20 @@ const router = require("express").Router();
 // Auth routes
 router.post("/auth/login", authController.login);
 router.post("/auth/verify", authController.verify);
-
+router.get("/user/contacts", userController.getContacts);
 router.get("/user/messages/:contactId", userController.getMessages);
 
 router.post("/user/create-message", userController.createMessage);
+router.post("/user/message", userController.createMessage);
+router.post("/user/message-read", userController.messageRead);
+router.post("/user/contact", userController.createContact);
+router.post("/user/reaction", userController.createReaction);
+router.post("/user/send-otp", userController.sendOtp);
+
+router.put("/user/profile", userController.updateProfile);
+router.put("/user/message/:messageId", userController.updateMessage);
+router.put("/user/email", userController.updateEmail);
 
+router.delete("/user", userController.deleteUser);
+router.delete("/user/message/:messageId", userController.deleteMessage);
 module.exports = router;
-- 
2.41.0


From 2161ff7198aaaf9a705e22dd69750529a72d4644 Mon Sep 17 00:00:00 2001
From: oscar-bek <salamov.behzod@gmail.com>
Date: Wed, 6 Aug 2025 13:01:44 +0900
Subject: [PATCH 6/8] feat(server): Connect to client uri

---
 app.js                         | 4 ++--
 controllers/auth.controller.js | 8 ++++----
 2 files changed, 6 insertions(+), 6 deletions(-)

diff --git a/app.js b/app.js
index 7457a4f..c31e1c5 100644
--- a/app.js
+++ b/app.js
@@ -1,7 +1,7 @@
 require('dotenv').config()
 
 const express = require('express')
-const cookieParser = require('cookie-parser')
+const cors = require('cors')
 const { default: mongoose } = require('mongoose')
 const errorMiddleware = require('./middlewares/error.middleware')
 
@@ -9,7 +9,7 @@ const app = express()
 
 // Middleware
 app.use(express.json())
-
+app.use(cors({ origin: process.env.CLIENT_URL, credentials: true, methods: ['GET', 'POST', 'PUT', 'DELETE'] }))
 app.use('/api', require('./routes/index'))
 
 app.use(errorMiddleware)
diff --git a/controllers/auth.controller.js b/controllers/auth.controller.js
index e9494e7..b0d4c6c 100644
--- a/controllers/auth.controller.js
+++ b/controllers/auth.controller.js
@@ -9,11 +9,11 @@ class AuthController {
 			const existUser = await userModel.findOne({ email })
 			if (existUser) {
 				await mailService.sendOtp(existUser.email)
-				return res.status(200).json({ message: 'existing_user' })
+				return res.status(200).json({ email: existUser.email })
 			}
 			const newUser = await userModel.create({ email })
 			await mailService.sendOtp(newUser.email)
-			res.status(200).json({ message: 'new_user' })
+			res.status(200).json({ email: newUser.email })
 		} catch (error) {
 			next(error)
 		}
@@ -23,8 +23,8 @@ class AuthController {
 			const { email, otp } = req.body
 			const result = await mailService.verifyOtp(email, otp)
 			if (result) {
-				await userModel.findOneAndUpdate({ email }, { isVerified: true })
-				res.status(200).json({ message: 'verified' })
+				const user = await userModel.findOneAndUpdate({ email }, { isVerified: true })
+				res.status(200).json({ user })
 			}
 		} catch (error) {
 			next(error)
-- 
2.41.0


From 8030ce92157f596ec0aad3671e8fe266ee1da3eb Mon Sep 17 00:00:00 2001
From: oscar-bek <salamov.behzod@gmail.com>
Date: Sun, 10 Aug 2025 13:08:58 +0900
Subject: [PATCH 7/8] feat(server): develop read status && react/edit/delete
 message

---
 app.js                         |   2 +
 controllers/auth.controller.js |  92 ++++---
 controllers/user.controller.js | 443 +++++++++++++++++----------------
 errors/base.error.js           |   4 +
 middlewares/auth.middleware.js |  33 +++
 package.json                   |   2 +
 routes/index.js                |  44 +++-
 7 files changed, 365 insertions(+), 255 deletions(-)
 create mode 100644 middlewares/auth.middleware.js

diff --git a/app.js b/app.js
index c31e1c5..7372e99 100644
--- a/app.js
+++ b/app.js
@@ -2,6 +2,7 @@ require('dotenv').config()
 
 const express = require('express')
 const cors = require('cors')
+const cookieParser = require('cookie-parser')
 const { default: mongoose } = require('mongoose')
 const errorMiddleware = require('./middlewares/error.middleware')
 
@@ -10,6 +11,7 @@ const app = express()
 // Middleware
 app.use(express.json())
 app.use(cors({ origin: process.env.CLIENT_URL, credentials: true, methods: ['GET', 'POST', 'PUT', 'DELETE'] }))
+app.use(cookieParser())
 app.use('/api', require('./routes/index'))
 
 app.use(errorMiddleware)
diff --git a/controllers/auth.controller.js b/controllers/auth.controller.js
index b0d4c6c..0d7660f 100644
--- a/controllers/auth.controller.js
+++ b/controllers/auth.controller.js
@@ -1,35 +1,65 @@
-const BaseError = require('../errors/base.error')
-const userModel = require('../models/user.model')
-const mailService = require('../service/mail.service')
+const BaseError = require("../errors/base.error");
+const userModel = require("../models/user.model");
+const mailService = require("../service/mail.service");
+const jwt = require('jsonwebtoken');
 
 class AuthController {
-	async login(req, res, next) {
-		try {
-			const { email } = req.body
-			const existUser = await userModel.findOne({ email })
-			if (existUser) {
-				await mailService.sendOtp(existUser.email)
-				return res.status(200).json({ email: existUser.email })
-			}
-			const newUser = await userModel.create({ email })
-			await mailService.sendOtp(newUser.email)
-			res.status(200).json({ email: newUser.email })
-		} catch (error) {
-			next(error)
-		}
-	}
-	async verify(req, res, next) {
-		try {
-			const { email, otp } = req.body
-			const result = await mailService.verifyOtp(email, otp)
-			if (result) {
-				const user = await userModel.findOneAndUpdate({ email }, { isVerified: true })
-				res.status(200).json({ user })
-			}
-		} catch (error) {
-			next(error)
-		}
-	}
+  async generateToken(req, res, next) {
+    try {
+      const { userId } = req.body;
+      console.log('Received userId:', userId); // Debug log
+
+      if (!userId) {
+        throw BaseError.BadRequest("User ID is required");
+      }
+
+      // Verify user exists
+      const user = await userModel.findById(userId);
+      if (!user) {
+        throw BaseError.NotFound("User not found");
+      }
+
+      const token = jwt.sign({ userId }, process.env.JWT_SECRET, {
+        expiresIn: "1h",
+      });
+      
+      console.log('Generated token successfully'); // Debug log
+      res.status(200).json({ token });
+    } catch (error) {
+      console.error('Token generation error:', error); // Debug log
+      next(error);
+    }
+  }
+  async login(req, res, next) {
+    try {
+      const { email } = req.body;
+      const existUser = await userModel.findOne({ email });
+      if (existUser) {
+        await mailService.sendOtp(existUser.email);
+        return res.status(200).json({ email: existUser.email });
+      }
+      const newUser = await userModel.create({ email });
+      await mailService.sendOtp(newUser.email);
+      res.status(200).json({ email: newUser.email });
+    } catch (error) {
+      next(error);
+    }
+  }
+  async verify(req, res, next) {
+    try {
+      const { email, otp } = req.body;
+      const result = await mailService.verifyOtp(email, otp);
+      if (result) {
+        const user = await userModel.findOneAndUpdate(
+          { email },
+          { isVerified: true }
+        );
+        res.status(200).json({ user });
+      }
+    } catch (error) {
+      next(error);
+    }
+  }
 }
 
-module.exports = new AuthController()
\ No newline at end of file
+module.exports = new AuthController();
diff --git a/controllers/user.controller.js b/controllers/user.controller.js
index ef3397d..7f46b46 100644
--- a/controllers/user.controller.js
+++ b/controllers/user.controller.js
@@ -1,220 +1,237 @@
-const BaseError = require("../errors/base.error");
-const { CONST } = require("../lib/constants");
-const messageModel = require("../models/message.model");
-const userModel = require("../models/user.model");
-const mailService = require("../service/mail.service");
+const BaseError = require('../errors/base.error')
+const { CONST } = require('../lib/constants')
+const messageModel = require('../models/message.model')
+const userModel = require('../models/user.model')
+const mailService = require('../service/mail.service')
 
 class UserController {
-  // [GET]
-  async getContacts(req, res, next) {
-    try {
-      const userId = "689065fe7766858e3b34a09e";
-
-      const contacts = await userModel.findById(userId).populate("contacts");
-      const allContacts = contacts.contacts.map((contact) =>
-        contact.toObject()
-      );
-
-      for (const contact of allContacts) {
-        const lastMessage = await messageModel
-          .findOne({
-            $or: [
-              { sender: userId, receiver: contact._id },
-              { sender: contact._id, receiver: userId },
-            ],
-          })
-          .populate({ path: "sender" })
-          .populate({ path: "receiver" })
-          .sort({ createdAt: -1 });
-
-        contact.lastMessage = lastMessage;
-      }
-
-      return res.status(200).json({ contacts: allContacts });
-    } catch (error) {
-      next(error);
-    }
-  }
+	// [GET]
+	async getContacts(req, res, next) {
+		try {
+			const userId = req.user._id
+
+			const contacts = await userModel.findById(userId).populate('contacts')
+			const allContacts = contacts.contacts.map(contact => contact.toObject())
+
+			for (const contact of allContacts) {
+				const lastMessage = await messageModel
+					.findOne({
+						$or: [
+							{ sender: userId, receiver: contact._id },
+							{ sender: contact._id, receiver: userId },
+						],
+					})
+					.populate({ path: 'sender' })
+					.populate({ path: 'receiver' })
+					.sort({ createdAt: -1 })
+
+				contact.lastMessage = lastMessage
+			}
+
+			return res.status(200).json({ contacts: allContacts })
+		} catch (error) {
+			next(error)
+		}
+	}
+	
   async getMessages(req, res, next) {
-    try {
-      const user = "689065fe7766858e3b34a09e";
-      const { contactId } = req.params;
-
-      const messages = await messageModel
-        .find({
-          $or: [
-            { sender: user, receiver: contactId },
-            { sender: contactId, receiver: user },
-          ],
-        })
-        .populate({ path: "sender", select: "email" })
-        .populate({ path: "receiver", select: "email" });
-
-      await messageModel.updateMany(
-        { sender: contactId, receiver: user, status: "SENT" },
-        { status: CONST.READ }
-      );
-
-      res.status(200).json({ messages });
-    } catch (error) {
-      next(error);
-    }
-  }
-
-  // [POST]
-  async createMessage(req, res, next) {
-    try {
-      const newMessage = await messageModel.create(req.body);
-      const currentMessage = await messageModel
-        .findById(newMessage._id)
-        .populate({ path: "sender", select: "email" })
-        .populate({ path: "receiver", select: "email" });
-      res.status(201).json({ newMessage: currentMessage });
-    } catch (error) {
-      next(error);
-    }
-  }
+	try {
+		const currentUserId = req.user._id  // Current user ID
+		const { contactId } = req.params     // Tanlangan contact ID
+		
+		console.log('Current User ID:', currentUserId)
+		console.log('Contact ID:', contactId)
+		
+		// FAQAT current user va contact orasidagi xabarlar
+		const messages = await messageModel
+			.find({
+				$or: [
+					// Current user yuborgan, contact qabul qilgan
+					{ sender: currentUserId, receiver: contactId },
+					// Contact yuborgan, current user qabul qilgan
+					{ sender: contactId, receiver: currentUserId },
+				],
+			})
+			.populate({ path: 'sender', select: 'email _id' })
+			.populate({ path: 'receiver', select: 'email _id' })
+			.sort({ createdAt: 1 }) // Vaqt bo'yicha tartiblash
+
+		console.log('Topilgan xabarlar soni:', messages.length)
+		console.log('Xabarlar:', messages.map(m => ({
+			id: m._id,
+			sender: m.sender._id,
+			receiver: m.receiver._id,
+			text: m.text
+		})))
+
+		// Contact tomondan yuborilgan va current user tomonidan o'qilmagan xabarlarni "o'qilgan" deb belgilash
+		await messageModel.updateMany(
+			{ 
+				sender: contactId, 
+				receiver: currentUserId, 
+				status: CONST.SENT 
+			}, 
+			{ status: CONST.READ }
+		)
+
+		res.status(200).json({ messages })
+	} catch (error) {
+		console.error('getMessages xatolik:', error)
+		next(error)
+	}
+}
+
+	// [POST]
+	async createMessage(req, res, next) {
+		try {
+			const userId = req.user._id
+			const createdMessage = await messageModel.create({ ...req.body, sender: userId })
+			const newMessage = await messageModel
+				.findById(createdMessage._id)
+				.populate({ path: 'sender' })
+				.populate({ path: 'receiver' })
+
+			const receiver = await userModel.findById(createdMessage.receiver)
+			const sender = await userModel.findById(createdMessage.sender)
+
+			res.status(201).json({ newMessage, sender, receiver })
+		} catch (error) {
+			next(error)
+		}
+	}
+
   async messageRead(req, res, next) {
-    try {
-      const { messages } = req.body;
-      const allMessages = [];
-
-      for (const message of messages) {
-        const updatedMessage = await messageModel.findByIdAndUpdate(
-          message._id,
-          { status: CONST.READ },
-          { new: true }
-        );
-        allMessages.push(updatedMessage);
-      }
-
-      res.status(200).json({ messages: allMessages });
-    } catch (error) {
-      next(error);
-    }
-  }
-  async createContact(req, res, next) {
-    try {
-      const { email } = req.body;
-      const userId = "689065fe7766858e3b34a09e";
-      const user = await userModel.findById(userId);
-      const contact = await userModel.findOne({ email });
-      if (!contact)
-        throw BaseError.BadRequest("User with this email does not exist");
-
-      if (user.email === contact.email)
-        throw BaseError.BadRequest("You cannot add yourself as a contact");
-
-      const existingContact = await userModel.findOne({
-        _id: userId,
-        contacts: contact._id,
-      });
-      if (existingContact) throw BaseError.BadRequest("Contact already exists");
-
-      await userModel.findByIdAndUpdate(userId, {
-        $push: { contacts: contact._id },
-      });
-      const addedContact = await userModel.findByIdAndUpdate(
-        contact._id,
-        { $push: { contacts: userId } },
-        { new: true }
-      );
-      return res
-        .status(201)
-        .json({ message: "Contact added successfully", contact: addedContact });
-    } catch (error) {
-      next(error);
-    }
-  }
-  async createReaction(req, res, next) {
-    try {
-      const { messageId, reaction } = req.body;
-      const updatedMessage = await messageModel.findByIdAndUpdate(
-        messageId,
-        { reaction },
-        { new: true }
-      );
-      res.status(201).json({ updatedMessage });
-    } catch (error) {
-      next(error);
-    }
-  }
-  async sendOtp(req, res, next) {
-    try {
-      const { email } = req.body;
-      const existingUser = await userModel.findOne({ email });
-      if (existingUser)
-        throw BaseError.BadRequest("User with this email already exists");
-      await mailService.sendOtp(email);
-      res.status(200).json({ message: "OTP sent successfully" });
-    } catch (error) {
-      next(error);
-    }
-  }
-
-  // [PUT]
-  async updateProfile(req, res, next) {
-    try {
-      const { userId, ...payload } = req.body;
-      await userModel.findByIdAndUpdate(userId, payload);
-      res.status(200).json({ message: "Profile updated successfully" });
-    } catch (error) {
-      next(error);
-    }
-  }
-  async updateMessage(req, res, next) {
-    try {
-      const { messageId } = req.params;
-      const { text } = req.body;
-      const updatedMessage = await messageModel.findByIdAndUpdate(
-        messageId,
-        { text },
-        { new: true }
-      );
-      res.status(200).json({ updatedMessage });
-    } catch (error) {
-      next(error);
-    }
-  }
-  async updateEmail(req, res, next) {
-    try {
-      const { email, otp } = req.body;
-      const result = await mailService.verifyOtp(email, otp);
-      if (result) {
-        const userId = "672eff8a01fdd82ec1969f97";
-        const user = await userModel.findByIdAndUpdate(
-          userId,
-          { email },
-          { new: true }
-        );
-        res.status(200).json({ user });
-      }
-    } catch (error) {
-      next(error);
-    }
-  }
-
-  // [DELETE]
-  async deleteUser(req, res, next) {
-    try {
-      const userId = "672eff8a01fdd82ec1969f97";
-      await userModel.findByIdAndDelete(userId);
-      res.status(200).json({ message: "User deleted successfully" });
-    } catch (error) {
-      next(error);
-    }
-  }
-  async deleteMessage(req, res, next) {
-    try {
-      const { messageId } = req.params;
-      await messageModel.findByIdAndDelete(messageId);
-      res.status(200).json({ message: "Message deleted successfully" });
-    } catch (error) {
-      next(error);
-    }
-  }
+	try {
+		const { messages } = req.body
+		console.log('=== messageRead API ===')
+		console.log('Kelgan xabarlar soni:', messages.length)
+		
+		const allMessages = []
+
+		for (const message of messages) {
+			console.log(`Xabar ${message._id} ni READ ga o'zgartirish...`)
+			
+			const updatedMessage = await messageModel
+				.findByIdAndUpdate(
+					message._id, 
+					{ status: CONST.READ }, 
+					{ new: true }
+				)
+				.populate({ path: 'sender', select: 'email _id' })
+				.populate({ path: 'receiver', select: 'email _id' })
+			
+			if (updatedMessage) {
+				console.log(`Xabar ${message._id} muvaffaqiyatli yangilandi:`, updatedMessage.status)
+				allMessages.push(updatedMessage)
+			} else {
+				console.log(`Xabar ${message._id} topilmadi!`)
+			}
+		}
+
+		console.log('Barcha yangilangan xabarlar soni:', allMessages.length)
+		res.status(200).json({ messages: allMessages })
+	} catch (error) {
+		console.error('messageRead xatolik:', error)
+		next(error)
+	}
+}
+
+	async createContact(req, res, next) {
+		try {
+			const { email } = req.body
+			const userId = req.user._id
+			const user = await userModel.findById(userId)
+			const contact = await userModel.findOne({ email })
+			if (!contact) throw BaseError.BadRequest('User with this email does not exist')
+
+			if (user.email === contact.email) throw BaseError.BadRequest('You cannot add yourself as a contact')
+
+			const existingContact = await userModel.findOne({ _id: userId, contacts: contact._id })
+			if (existingContact) throw BaseError.BadRequest('Contact already exists')
+
+			await userModel.findByIdAndUpdate(userId, { $push: { contacts: contact._id } })
+			const addedContact = await userModel.findByIdAndUpdate(contact._id, { $push: { contacts: userId } }, { new: true })
+			return res.status(201).json({ contact: addedContact })
+		} catch (error) {
+			next(error)
+		}
+	}
+	async createReaction(req, res, next) {
+		try {
+			const { messageId, reaction } = req.body
+			const updatedMessage = await messageModel.findByIdAndUpdate(messageId, { reaction }, { new: true })
+			res.status(201).json({ updatedMessage })
+		} catch (error) {
+			next(error)
+		}
+	}
+	async sendOtp(req, res, next) {
+		try {
+			const { email } = req.body
+			const existingUser = await userModel.findOne({ email })
+			if (existingUser) throw BaseError.BadRequest('User with this email already exists')
+			await mailService.sendOtp(email)
+			res.status(200).json({ email })
+		} catch (error) {
+			next(error)
+		}
+	}
+
+	// [PUT]
+	async updateProfile(req, res, next) {
+		try {
+			const user = req.user
+			await userModel.findByIdAndUpdate(user._id, req.body)
+			res.status(200).json({ message: 'Profile updated successfully' })
+		} catch (error) {
+			next(error)
+		}
+	}
+	async updateMessage(req, res, next) {
+		try {
+			const { messageId } = req.params
+			const { text } = req.body
+			const updatedMessage = await messageModel.findByIdAndUpdate(messageId, { text }, { new: true })
+			res.status(200).json({ updatedMessage })
+		} catch (error) {
+			next(error)
+		}
+	}
+	async updateEmail(req, res, next) {
+		try {
+			const { email, otp } = req.body
+			const result = await mailService.verifyOtp(email, otp)
+			if (result) {
+				const userId = req.user._id
+				console.log(userId)
+				const user = await userModel.findByIdAndUpdate(userId, { email }, { new: true })
+				res.status(200).json({ user })
+			}
+		} catch (error) {
+			next(error)
+		}
+	}
+
+	// [DELETE]
+	async deleteUser(req, res, next) {
+		try {
+			const userId = req.user._id
+			await userModel.findByIdAndDelete(userId)
+			res.status(200).json({ message: 'User deleted successfully' })
+		} catch (error) {
+			next(error)
+		}
+	}
+	async deleteMessage(req, res, next) {
+		try {
+			const { messageId } = req.params
+		const deletedMessage = await messageModel.findByIdAndDelete(messageId)
+			res.status(200).json({ deletedMessage })
+		} catch (error) {
+			next(error)
+		}
+	}
 }
 
-module.exports = new UserController();
+module.exports = new UserController()
 
-// a b odamni kontaktiga qo'shvotti
diff --git a/errors/base.error.js b/errors/base.error.js
index b10dc66..2367529 100644
--- a/errors/base.error.js
+++ b/errors/base.error.js
@@ -11,4 +11,8 @@ module.exports = class BaseError extends Error {
 	static BadRequest(message, errors = []) {
 		return new BaseError(400, message, errors)
 	}
+
+	static Unauthorized() {
+		return new BaseError(401, 'Unauthorized')
+	}
 }
\ No newline at end of file
diff --git a/middlewares/auth.middleware.js b/middlewares/auth.middleware.js
new file mode 100644
index 0000000..9f38806
--- /dev/null
+++ b/middlewares/auth.middleware.js
@@ -0,0 +1,33 @@
+const BaseError = require("../errors/base.error");
+const jwt = require("jsonwebtoken");
+const userModel = require("../models/user.model");
+
+module.exports = async function (req, res, next) {
+  try {
+    const authorization = req.headers.authorization;
+
+    if (!authorization) {
+      return next(BaseError.Unauthorized());
+    }
+
+    const token = authorization.split(" ")[1];
+    if (!token) {
+      return next(BaseError.Unauthorized());
+    }
+
+    const { userId } = jwt.verify(token, process.env.JWT_SECRET);
+    if (!userId) {
+      return next(BaseError.Unauthorized());
+    }
+
+    const user = await userModel.findById(userId);
+    if (!user) {
+      return next(BaseError.Unauthorized());
+    }
+
+    req.user = user;
+    next();
+  } catch (error) {
+    return next(BaseError.Unauthorized("Invalid token"));
+  }
+};
diff --git a/package.json b/package.json
index e9a0f44..3b258ca 100644
--- a/package.json
+++ b/package.json
@@ -17,6 +17,7 @@
   "dependencies": {
     "@radix-ui/react-accordion": "^1.2.11",
     "@radix-ui/react-switch": "^1.2.5",
+    "@types/jsonwebtoken": "^9.0.10",
     "bcrypt": "^6.0.0",
     "cookie-parser": "^1.4.7",
     "cors": "^2.8.5",
@@ -24,6 +25,7 @@
     "express": "^5.1.0",
     "express-group-routes": "^1.1.0",
     "http": "^0.0.1-security",
+    "jsonwebtoken": "^9.0.2",
     "mongoose": "^8.17.0",
     "nodemailer": "^6.10.1",
     "nodemon": "^3.1.10",
diff --git a/routes/index.js b/routes/index.js
index 5db9a62..6b6926e 100644
--- a/routes/index.js
+++ b/routes/index.js
@@ -1,25 +1,47 @@
 const authController = require("../controllers/auth.controller");
 const userController = require("../controllers/user.controller");
+const authMiddleware = require("../middlewares/auth.middleware");
 
 const router = require("express").Router();
 
 // Auth routes
 router.post("/auth/login", authController.login);
 router.post("/auth/verify", authController.verify);
-router.get("/user/contacts", userController.getContacts);
-router.get("/user/messages/:contactId", userController.getMessages);
+router.post("/auth/token", authController.generateToken);
+router.get("/user/contacts", authMiddleware, userController.getContacts);
+router.get(
+  "/user/messages/:contactId",
+  authMiddleware,
+  userController.getMessages
+);
 
-router.post("/user/create-message", userController.createMessage);
-router.post("/user/message", userController.createMessage);
-router.post("/user/message-read", userController.messageRead);
-router.post("/user/contact", userController.createContact);
+router.post(
+  "/user/create-message",
+  authMiddleware,
+  userController.createMessage
+);
+router.post("/user/message", authMiddleware, userController.createMessage);
+router.post("/user/message-read", authMiddleware, userController.messageRead);
+router.post("/user/contact", authMiddleware, userController.createContact);
 router.post("/user/reaction", userController.createReaction);
 router.post("/user/send-otp", userController.sendOtp);
+router.post("/send-otp", authMiddleware, userController.sendOtp);
 
-router.put("/user/profile", userController.updateProfile);
-router.put("/user/message/:messageId", userController.updateMessage);
-router.put("/user/email", userController.updateEmail);
+router.put("/user/profile", authMiddleware, userController.updateProfile);
+router.put("/profile", authMiddleware, userController.updateProfile);
+router.put(
+  "/user/message/:messageId",
+  authMiddleware,
+  userController.updateMessage
+);
+router.put("/user/email", authMiddleware, userController.updateEmail);
+router.put("/email", authMiddleware, userController.updateEmail);
 
-router.delete("/user", userController.deleteUser);
-router.delete("/user/message/:messageId", userController.deleteMessage);
+router.delete("/user", authMiddleware, userController.deleteUser);
+router.delete("/", authMiddleware, userController.deleteUser);
+router.delete(
+  "/user/message/:messageId",
+  authMiddleware,
+  userController.deleteMessage
+);
 module.exports = router;
-- 
2.41.0


From 75218f24652fb177426ddf738cb0bc7b106878ca Mon Sep 17 00:00:00 2001
From: oscar-bek <salamov.behzod@gmail.com>
Date: Sun, 10 Aug 2025 16:39:42 +0900
Subject: [PATCH 8/8] fix(server): modify message.modal

---
 models/message.model.js | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/models/message.model.js b/models/message.model.js
index c8a890e..e8f3ea8 100644
--- a/models/message.model.js
+++ b/models/message.model.js
@@ -6,7 +6,7 @@ const messageSchema = new Schema(
 		sender: { type: Schema.Types.ObjectId, ref: 'User', required: true },
 		receiver: { type: Schema.Types.ObjectId, ref: 'User', required: true },
 		text: { type: String },
-		media: { type: String },
+	image: { type: String },
 		status: { type: String, enum: [CONST.DELIVERED, CONST.READ, CONST.SENT], default: CONST.SENT },
 		reaction: { type: String },
 	},
-- 
2.41.0

